
import React, { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { RotateCcw, Bug, Play, AlertTriangle, CheckCircle2, Copy } from 'lucide-react';
import { useToast } from '@/components/ui/use-toast';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';

const WebExploitTool: React.FC = () => {
  const [targetUrl, setTargetUrl] = useState('');
  const [sqlQuery, setSqlQuery] = useState('');
  const [xssPayload, setXssPayload] = useState('');
  const [commandInput, setCommandInput] = useState('');
  const [vulnerabilityType, setVulnerabilityType] = useState<'error' | 'blind' | 'time'>('error');
  const [output, setOutput] = useState<string | null>(null);
  const [isRunning, setIsRunning] = useState(false);
  const [analysisResult, setAnalysisResult] = useState<{
    vulnerable: boolean;
    details: string;
    severity?: 'low' | 'medium' | 'high' | 'critical';
  } | null>(null);
  const { toast } = useToast();

  const sampleSqlInjections = [
    "' OR 1=1 --",
    "admin' --",
    "' UNION SELECT username, password FROM users --",
    "' OR '1'='1",
    "'; DROP TABLE users; --"
  ];

  const sampleXssPayloads = [
    "<script>alert('XSS')</script>",
    "<img src=x onerror=alert('XSS')>",
    "<svg onload=alert('XSS')>",
    "javascript:alert('XSS')",
    "<iframe src=\"javascript:alert('XSS')\"></iframe>"
  ];

  const sampleCommands = [
    "ls -la",
    "cat /etc/passwd",
    "whoami",
    "id",
    "uname -a"
  ];

  const handleSqlTest = () => {
    if (!targetUrl) {
      toast({
        title: "URL Required",
        description: "Please enter a target URL to test.",
        variant: "destructive",
      });
      return;
    }

    if (!sqlQuery) {
      toast({
        title: "SQL Query Required",
        description: "Please enter an SQL injection payload to test.",
        variant: "destructive",
      });
      return;
    }

    setIsRunning(true);
    setOutput(null);
    setAnalysisResult(null);

    // Simulate SQL injection testing
    setTimeout(() => {
      // Randomly determine if the site is vulnerable (for demonstration)
      const isVulnerable = Math.random() > 0.5;
      
      if (isVulnerable) {
        // Generate fake database results
        const fakeDbResults = [
          { id: 1, username: "admin", email: "admin@example.com" },
          { id: 2, username: "user1", email: "user1@example.com" },
          { id: 3, username: "john_doe", email: "john@example.com" },
        ];
        
        setOutput(JSON.stringify(fakeDbResults, null, 2));
        
        setAnalysisResult({
          vulnerable: true,
          details: "The application appears to be vulnerable to SQL injection. The input is not properly sanitized before being used in database queries.",
          severity: "critical"
        });
        
        toast({
          title: "Vulnerability Detected",
          description: "SQL injection vulnerability found in the target application.",
          variant: "destructive",
        });
      } else {
        setOutput("No data returned or injection failed.");
        
        setAnalysisResult({
          vulnerable: false,
          details: "The application does not appear to be vulnerable to basic SQL injection. Additional testing with more advanced payloads may be required."
        });
        
        toast({
          title: "Test Complete",
          description: "No obvious SQL injection vulnerability detected.",
        });
      }
      
      setIsRunning(false);
    }, 2000);
  };

  const handleXssTest = () => {
    if (!targetUrl) {
      toast({
        title: "URL Required",
        description: "Please enter a target URL to test.",
        variant: "destructive",
      });
      return;
    }

    if (!xssPayload) {
      toast({
        title: "XSS Payload Required",
        description: "Please enter an XSS payload to test.",
        variant: "destructive",
      });
      return;
    }

    setIsRunning(true);
    setOutput(null);
    setAnalysisResult(null);

    // Simulate XSS testing
    setTimeout(() => {
      // Randomly determine if the site is vulnerable (for demonstration)
      const isVulnerable = Math.random() > 0.5;
      
      if (isVulnerable) {
        setOutput(`
<div class="text-green-400">Payload was reflected in the response:</div>
<pre class="bg-black/30 p-2 rounded mt-2 text-yellow-300 overflow-x-auto">${xssPayload}</pre>
<div class="mt-3">The payload was reflected without proper encoding or sanitization, making the application vulnerable to XSS attacks.</div>
        `);
        
        setAnalysisResult({
          vulnerable: true,
          details: "The application appears to be vulnerable to Cross-Site Scripting (XSS). User input is being directly reflected in the response without proper encoding or sanitization.",
          severity: "high"
        });
        
        toast({
          title: "Vulnerability Detected",
          description: "XSS vulnerability found in the target application.",
          variant: "destructive",
        });
      } else {
        setOutput(`
<div>The payload was not reflected in the response, or it was properly encoded/sanitized:</div>
<pre class="bg-black/30 p-2 rounded mt-2 text-gray-400 overflow-x-auto">&lt;script&gt;alert('XSS')&lt;/script&gt;</pre>
<div class="mt-3">No obvious XSS vulnerability was detected. The application may be properly sanitizing or encoding user input.</div>
        `);
        
        setAnalysisResult({
          vulnerable: false,
          details: "The application does not appear to be vulnerable to basic XSS attacks. Additional testing with more advanced payloads may be required."
        });
        
        toast({
          title: "Test Complete",
          description: "No obvious XSS vulnerability detected.",
        });
      }
      
      setIsRunning(false);
    }, 2000);
  };

  const handleCommandTest = () => {
    if (!targetUrl) {
      toast({
        title: "URL Required",
        description: "Please enter a target URL to test.",
        variant: "destructive",
      });
      return;
    }

    if (!commandInput) {
      toast({
        title: "Command Required",
        description: "Please enter a command to test.",
        variant: "destructive",
      });
      return;
    }

    setIsRunning(true);
    setOutput(null);
    setAnalysisResult(null);

    // Simulate command injection testing
    setTimeout(() => {
      // Randomly determine if the site is vulnerable (for demonstration)
      const isVulnerable = Math.random() > 0.5;
      
      if (isVulnerable) {
        // Generate fake command output based on the input
        let fakeOutput = "";
        
        if (commandInput.includes("ls")) {
          fakeOutput = "file1.txt\nfile2.txt\nconfig.php\n.htaccess\nbackup.zip";
        } else if (commandInput.includes("cat")) {
          fakeOutput = "root:x:0:0:root:/root:/bin/bash\ndaemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin\nbin:x:2:2:bin:/bin:/usr/sbin/nologin";
        } else if (commandInput.includes("whoami")) {
          fakeOutput = "www-data";
        } else if (commandInput.includes("id")) {
          fakeOutput = "uid=33(www-data) gid=33(www-data) groups=33(www-data)";
        } else if (commandInput.includes("uname")) {
          fakeOutput = "Linux web-server 5.4.0-1-amd64 #1 SMP Debian 5.4.8-1 (2020-01-05) x86_64 GNU/Linux";
        } else {
          fakeOutput = "Command executed successfully. Output: [REDACTED]";
        }
        
        setOutput(fakeOutput);
        
        setAnalysisResult({
          vulnerable: true,
          details: "The application appears to be vulnerable to command injection. User input is being directly passed to a shell command without proper sanitization.",
          severity: "critical"
        });
        
        toast({
          title: "Vulnerability Detected",
          description: "Command injection vulnerability found in the target application.",
          variant: "destructive",
        });
      } else {
        setOutput("Command execution failed or was blocked by security controls.");
        
        setAnalysisResult({
          vulnerable: false,
          details: "The application does not appear to be vulnerable to basic command injection attacks. Additional testing with more advanced payloads may be required."
        });
        
        toast({
          title: "Test Complete",
          description: "No obvious command injection vulnerability detected.",
        });
      }
      
      setIsRunning(false);
    }, 2000);
  };

  const handleReset = () => {
    setTargetUrl('');
    setSqlQuery('');
    setXssPayload('');
    setCommandInput('');
    setVulnerabilityType('error');
    setOutput(null);
    setAnalysisResult(null);
  };

  const handleCopy = () => {
    if (!output) return;
    
    navigator.clipboard.writeText(typeof output === 'string' ? output : JSON.stringify(output, null, 2));
    toast({
      title: "Copied to clipboard",
      description: "The output has been copied to your clipboard.",
    });
  };

  const handleLoadSample = (type: 'sql' | 'xss' | 'command') => {
    if (type === 'sql') {
      const randomIndex = Math.floor(Math.random() * sampleSqlInjections.length);
      setSqlQuery(sampleSqlInjections[randomIndex]);
    } else if (type === 'xss') {
      const randomIndex = Math.floor(Math.random() * sampleXssPayloads.length);
      setXssPayload(sampleXssPayloads[randomIndex]);
    } else if (type === 'command') {
      const randomIndex = Math.floor(Math.random() * sampleCommands.length);
      setCommandInput(sampleCommands[randomIndex]);
    }
  };

  return (
    <div className="animate-fade-up w-full max-w-2xl mx-auto">
      <div className="cyber-panel p-6">
        <div className="flex items-center mb-6">
          <Bug className="mr-2 h-6 w-6 text-cyber-blue" />
          <h2 className="text-xl font-bold flex-1">Web Exploitation Tool</h2>
          <Button
            variant="outline"
            size="sm"
            className="text-xs"
            onClick={handleReset}
          >
            <RotateCcw className="mr-1 h-3 w-3" />
            Reset
          </Button>
        </div>

        <div className="space-y-6">
          <div className="w-full">
            <Label htmlFor="targetUrl" className="text-sm mb-2 block text-gray-300">
              Target URL
            </Label>
            <Input
              id="targetUrl"
              value={targetUrl}
              onChange={(e) => setTargetUrl(e.target.value)}
              placeholder="https://example.com/vulnerable-page"
              className="font-mono"
            />
            <p className="text-xs text-gray-400 mt-1">
              Enter the full URL of the page you want to test for vulnerabilities
            </p>
          </div>
          
          <Tabs defaultValue="sql" className="w-full">
            <TabsList className="w-full grid grid-cols-3 mb-6">
              <TabsTrigger value="sql">SQL Injection</TabsTrigger>
              <TabsTrigger value="xss">XSS</TabsTrigger>
              <TabsTrigger value="command">Command Injection</TabsTrigger>
            </TabsList>
            
            <TabsContent value="sql" className="space-y-4">
              <div>
                <div className="flex justify-between items-center mb-2">
                  <Label htmlFor="sqlQuery" className="text-sm text-gray-300">
                    SQL Injection Payload
                  </Label>
                  <Button
                    variant="ghost"
                    size="sm"
                    onClick={() => handleLoadSample('sql')}
                    className="h-6 px-2 text-xs"
                  >
                    Load Sample
                  </Button>
                </div>
                <Textarea
                  id="sqlQuery"
                  value={sqlQuery}
                  onChange={(e) => setSqlQuery(e.target.value)}
                  placeholder="Enter SQL injection payload (e.g., ' OR 1=1 --)"
                  className="font-mono resize-y min-h-[100px]"
                />
              </div>
              
              <div>
                <Label htmlFor="vulnerabilityType" className="text-sm mb-2 block text-gray-300">
                  Vulnerability Type
                </Label>
                <Select
                  value={vulnerabilityType}
                  onValueChange={(value) => setVulnerabilityType(value as 'error' | 'blind' | 'time')}
                >
                  <SelectTrigger id="vulnerabilityType" className="w-full">
                    <SelectValue placeholder="Select vulnerability type" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="error">Error-Based</SelectItem>
                    <SelectItem value="blind">Blind</SelectItem>
                    <SelectItem value="time">Time-Based</SelectItem>
                  </SelectContent>
                </Select>
              </div>
              
              <Button
                onClick={handleSqlTest}
                disabled={isRunning}
                className="w-full bg-cyber-blue hover:bg-cyber-blue/80"
              >
                {isRunning ? (
                  <>
                    <div className="animate-spin h-4 w-4 border-2 border-white border-opacity-50 border-t-white rounded-full mr-2" />
                    Testing...
                  </>
                ) : (
                  <>
                    <Play className="h-4 w-4 mr-2" />
                    Test SQL Injection
                  </>
                )}
              </Button>
            </TabsContent>
            
            <TabsContent value="xss" className="space-y-4">
              <div>
                <div className="flex justify-between items-center mb-2">
                  <Label htmlFor="xssPayload" className="text-sm text-gray-300">
                    XSS Payload
                  </Label>
                  <Button
                    variant="ghost"
                    size="sm"
                    onClick={() => handleLoadSample('xss')}
                    className="h-6 px-2 text-xs"
                  >
                    Load Sample
                  </Button>
                </div>
                <Textarea
                  id="xssPayload"
                  value={xssPayload}
                  onChange={(e) => setXssPayload(e.target.value)}
                  placeholder="Enter XSS payload (e.g., <script>alert('XSS')</script>)"
                  className="font-mono resize-y min-h-[100px]"
                />
              </div>
              
              <Button
                onClick={handleXssTest}
                disabled={isRunning}
                className="w-full bg-cyber-blue hover:bg-cyber-blue/80"
              >
                {isRunning ? (
                  <>
                    <div className="animate-spin h-4 w-4 border-2 border-white border-opacity-50 border-t-white rounded-full mr-2" />
                    Testing...
                  </>
                ) : (
                  <>
                    <Play className="h-4 w-4 mr-2" />
                    Test XSS Vulnerability
                  </>
                )}
              </Button>
            </TabsContent>
            
            <TabsContent value="command" className="space-y-4">
              <div>
                <div className="flex justify-between items-center mb-2">
                  <Label htmlFor="commandInput" className="text-sm text-gray-300">
                    Command Injection
                  </Label>
                  <Button
                    variant="ghost"
                    size="sm"
                    onClick={() => handleLoadSample('command')}
                    className="h-6 px-2 text-xs"
                  >
                    Load Sample
                  </Button>
                </div>
                <Input
                  id="commandInput"
                  value={commandInput}
                  onChange={(e) => setCommandInput(e.target.value)}
                  placeholder="Enter command to inject (e.g., ls -la; cat /etc/passwd)"
                  className="font-mono"
                />
              </div>
              
              <Button
                onClick={handleCommandTest}
                disabled={isRunning}
                className="w-full bg-cyber-blue hover:bg-cyber-blue/80"
              >
                {isRunning ? (
                  <>
                    <div className="animate-spin h-4 w-4 border-2 border-white border-opacity-50 border-t-white rounded-full mr-2" />
                    Testing...
                  </>
                ) : (
                  <>
                    <Play className="h-4 w-4 mr-2" />
                    Test Command Injection
                  </>
                )}
              </Button>
            </TabsContent>
          </Tabs>
          
          {/* Results section */}
          {(output || analysisResult) && (
            <div className="space-y-4 mt-6">
              <div className="border-t border-cyber-dark pt-4">
                <h3 className="text-lg font-medium mb-4">Test Results</h3>
                
                {analysisResult && (
                  <div className={`mb-4 p-4 rounded-md ${
                    analysisResult.vulnerable 
                      ? 'bg-red-900/30 border border-red-500/50' 
                      : 'bg-green-900/30 border border-green-500/50'
                  }`}>
                    <div className="flex items-start">
                      {analysisResult.vulnerable ? (
                        <AlertTriangle className="h-5 w-5 text-red-400 mr-2 flex-shrink-0 mt-0.5" />
                      ) : (
                        <CheckCircle2 className="h-5 w-5 text-green-400 mr-2 flex-shrink-0 mt-0.5" />
                      )}
                      <div>
                        <h4 className={`font-medium ${
                          analysisResult.vulnerable ? 'text-red-400' : 'text-green-400'
                        }`}>
                          {analysisResult.vulnerable 
                            ? `Vulnerability Detected ${analysisResult.severity ? `(${analysisResult.severity.toUpperCase()})` : ''}` 
                            : 'No Vulnerability Detected'}
                        </h4>
                        <p className="text-sm text-gray-300 mt-1">{analysisResult.details}</p>
                      </div>
                    </div>
                  </div>
                )}
                
                {output && (
                  <div className="w-full">
                    <div className="flex justify-between items-center mb-2">
                      <Label className="text-sm text-gray-300">
                        Output
                      </Label>
                      <Button
                        variant="ghost"
                        size="sm"
                        onClick={handleCopy}
                        className="h-6 px-2 text-xs"
                      >
                        <Copy className="mr-1 h-3 w-3" />
                        Copy
                      </Button>
                    </div>
                    <div className="bg-cyber-darker border border-cyber-dark p-4 rounded-md">
                      {typeof output === 'string' && output.includes('<') ? (
                        <div className="text-sm text-gray-300" dangerouslySetInnerHTML={{ __html: output }} />
                      ) : (
                        <pre className="text-sm text-gray-300 whitespace-pre-wrap overflow-x-auto">
                          {typeof output === 'string' ? output : JSON.stringify(output, null, 2)}
                        </pre>
                      )}
                    </div>
                  </div>
                )}
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default WebExploitTool;
