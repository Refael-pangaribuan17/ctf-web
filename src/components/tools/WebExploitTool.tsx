
import React, { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { AlertCircle, Bug, Copy, ExternalLink, RotateCcw, Search, ShieldAlert } from 'lucide-react';
import { useToast } from '@/components/ui/use-toast';
import { Skeleton } from '@/components/ui/skeleton';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Alert, AlertTitle, AlertDescription } from '@/components/ui/alert';

interface Vulnerability {
  name: string;
  description: string;
  severity: 'low' | 'medium' | 'high' | 'critical';
  recommendation: string;
  references: string[];
  category: string;
}

interface ScanResult {
  url: string;
  timestamp: string;
  vulnerabilities: Vulnerability[];
  technologies?: string[];
}

const WebExploitTool: React.FC = () => {
  const [targetUrl, setTargetUrl] = useState('');
  const [isScanning, setIsScanning] = useState(false);
  const [scanResults, setScanResults] = useState<ScanResult | null>(null);
  const [error, setError] = useState<string | null>(null);
  const { toast } = useToast();

  // Common web vulnerabilities database
  const vulnerabilityDatabase: Record<string, Vulnerability[]> = {
    "wordpress": [
      {
        name: "WordPress Plugin Vulnerabilities",
        description: "Many WordPress plugins contain vulnerabilities that can be exploited to gain unauthorized access.",
        severity: "high",
        recommendation: "Keep all plugins updated to the latest version and remove unused plugins.",
        references: ["https://www.exploit-db.com/search?q=wordpress+plugin"],
        category: "CMS"
      },
      {
        name: "WordPress Version Disclosure",
        description: "The WordPress version is often exposed in the HTML source or RSS feeds.",
        severity: "low",
        recommendation: "Remove version information from the HTML and disable RSS if not needed.",
        references: ["https://www.acunetix.com/vulnerabilities/web/wordpress-version-disclosure/"],
        category: "Information Disclosure"
      }
    ],
    "php": [
      {
        name: "PHP Injection",
        description: "User input is not properly sanitized before being used in PHP functions like eval().",
        severity: "critical",
        recommendation: "Never use eval() with user input and properly sanitize all inputs.",
        references: ["https://owasp.org/www-community/vulnerabilities/PHP_Object_Injection"],
        category: "Injection"
      },
      {
        name: "Local File Inclusion (LFI)",
        description: "Improper validation of file paths can allow attackers to include local files.",
        severity: "high",
        recommendation: "Validate and sanitize file paths, use whitelists for file inclusion.",
        references: ["https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/11.1-Testing_for_Local_File_Inclusion"],
        category: "File Inclusion"
      }
    ],
    "apache": [
      {
        name: "Apache Server Information Disclosure",
        description: "Apache server might reveal version information in HTTP headers.",
        severity: "low",
        recommendation: "Configure Apache to hide version information in HTTP headers.",
        references: ["https://www.acunetix.com/vulnerabilities/web/apache-server-information-disclosure/"],
        category: "Information Disclosure"
      }
    ],
    "nginx": [
      {
        name: "Nginx Misconfiguration",
        description: "Misconfigured Nginx can lead to path traversal or information disclosure.",
        severity: "medium",
        recommendation: "Review and harden Nginx configuration, especially location blocks.",
        references: ["https://blog.detectify.com/2020/11/10/common-nginx-misconfigurations/"],
        category: "Misconfiguration"
      }
    ],
    "jquery": [
      {
        name: "Outdated jQuery",
        description: "Old versions of jQuery may contain XSS vulnerabilities.",
        severity: "medium",
        recommendation: "Update to the latest version of jQuery.",
        references: ["https://snyk.io/blog/after-three-years-of-silence-a-new-jquery-prototype-pollution-vulnerability-emerges-once-again/"],
        category: "Client-Side"
      }
    ],
    "general": [
      {
        name: "Cross-Site Scripting (XSS)",
        description: "User input is not properly sanitized before being displayed on the page.",
        severity: "high",
        recommendation: "Implement proper input validation and output encoding.",
        references: ["https://owasp.org/www-community/attacks/xss/"],
        category: "Injection"
      },
      {
        name: "SQL Injection",
        description: "User input is not properly sanitized before being used in SQL queries.",
        severity: "critical",
        recommendation: "Use parameterized queries or prepared statements.",
        references: ["https://owasp.org/www-community/attacks/SQL_Injection"],
        category: "Injection"
      },
      {
        name: "Cross-Site Request Forgery (CSRF)",
        description: "The application doesn't validate that requests are intentionally made by the user.",
        severity: "high",
        recommendation: "Implement anti-CSRF tokens for all state-changing operations.",
        references: ["https://owasp.org/www-community/attacks/csrf"],
        category: "Session Management"
      },
      {
        name: "Insecure Direct Object References (IDOR)",
        description: "The application exposes references to internal objects, allowing unauthorized access.",
        severity: "high",
        recommendation: "Implement proper access controls and use indirect references.",
        references: ["https://cheatsheetseries.owasp.org/cheatsheets/Insecure_Direct_Object_Reference_Prevention_Cheat_Sheet.html"],
        category: "Access Control"
      },
      {
        name: "Security Misconfiguration",
        description: "The application may have default configurations, unnecessary features, or informative error messages.",
        severity: "medium",
        recommendation: "Implement a proper security configuration and harden server settings.",
        references: ["https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration"],
        category: "Misconfiguration"
      }
    ]
  };

  const analyzeWebsite = async () => {
    if (!targetUrl) {
      toast({
        title: "URL Required",
        description: "Please enter a target URL to analyze.",
        variant: "destructive",
      });
      return;
    }

    let url = targetUrl;
    if (!url.startsWith('http://') && !url.startsWith('https://')) {
      url = 'https://' + url;
    }

    setIsScanning(true);
    setError(null);
    setScanResults(null);

    try {
      // This would normally be an API call to a backend service
      // For this demo, we'll simulate the scan with a timeout
      await new Promise(resolve => setTimeout(resolve, 2000));

      // Simulate detected technologies
      const detectedTech = simulateTechDetection(url);
      
      // Generate vulnerability recommendations based on detected technologies
      const vulnerabilities = generateVulnerabilityRecommendations(detectedTech);
      
      const result: ScanResult = {
        url: url,
        timestamp: new Date().toISOString(),
        vulnerabilities: vulnerabilities,
        technologies: detectedTech
      };
      
      setScanResults(result);
      
      toast({
        title: "Scan Complete",
        description: `Found ${vulnerabilities.length} potential vulnerabilities.`,
        variant: vulnerabilities.length > 0 ? "destructive" : "default",
      });
    } catch (err) {
      console.error("Error scanning website:", err);
      setError("Failed to scan the website. Please check the URL and try again.");
      toast({
        title: "Scan Failed",
        description: "There was an error analyzing the target website.",
        variant: "destructive",
      });
    } finally {
      setIsScanning(false);
    }
  };

  const simulateTechDetection = (url: string): string[] => {
    // In a real implementation, this would analyze HTTP headers, HTML content, etc.
    // For this demo, we'll randomize some technologies based on the domain
    const domain = new URL(url).hostname;
    const technologies: string[] = ['general'];
    
    // Randomize some technologies for demonstration
    const possibleTech = ['wordpress', 'php', 'apache', 'nginx', 'jquery'];
    const techCount = Math.floor(Math.random() * 3) + 1; // 1-3 technologies
    
    for (let i = 0; i < techCount; i++) {
      const randomIndex = Math.floor(Math.random() * possibleTech.length);
      const tech = possibleTech[randomIndex];
      if (!technologies.includes(tech)) {
        technologies.push(tech);
      }
      // Remove the selected tech to avoid duplicates
      possibleTech.splice(randomIndex, 1);
      if (possibleTech.length === 0) break;
    }
    
    return technologies;
  };

  const generateVulnerabilityRecommendations = (technologies: string[]): Vulnerability[] => {
    let vulnerabilities: Vulnerability[] = [];
    
    // Add vulnerabilities based on detected technologies
    technologies.forEach(tech => {
      if (vulnerabilityDatabase[tech]) {
        vulnerabilities = [...vulnerabilities, ...vulnerabilityDatabase[tech]];
      }
    });
    
    // Randomize a bit to make it more realistic
    // In some cases, not all vulnerabilities will be present
    return vulnerabilities
      .filter(() => Math.random() > 0.3) // Randomly exclude some vulnerabilities
      .sort((a, b) => {
        const severityOrder = { critical: 0, high: 1, medium: 2, low: 3 };
        return severityOrder[a.severity] - severityOrder[b.severity];
      });
  };

  const handleReset = () => {
    setTargetUrl('');
    setScanResults(null);
    setError(null);
  };

  const handleCopy = (text: string) => {
    navigator.clipboard.writeText(text);
    toast({
      title: "Copied to clipboard",
      description: "The content has been copied to your clipboard.",
    });
  };

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case 'critical': return 'bg-red-900 text-white';
      case 'high': return 'bg-red-700 text-white';
      case 'medium': return 'bg-orange-600 text-white';
      case 'low': return 'bg-yellow-600 text-white';
      default: return 'bg-gray-600 text-white';
    }
  };

  const groupVulnerabilitiesByCategory = (vulnerabilities: Vulnerability[]): Record<string, Vulnerability[]> => {
    return vulnerabilities.reduce((groups, vuln) => {
      const category = vuln.category || 'Other';
      if (!groups[category]) {
        groups[category] = [];
      }
      groups[category].push(vuln);
      return groups;
    }, {} as Record<string, Vulnerability[]>);
  };

  return (
    <div className="animate-fade-up w-full max-w-3xl mx-auto">
      <div className="cyber-panel p-6">
        <div className="flex items-center mb-6">
          <Bug className="mr-2 h-6 w-6 text-cyber-blue" />
          <h2 className="text-xl font-bold flex-1">Web Exploitation Tool</h2>
          <Button
            variant="outline"
            size="sm"
            className="text-xs"
            onClick={handleReset}
          >
            <RotateCcw className="mr-1 h-3 w-3" />
            Reset
          </Button>
        </div>

        <Alert className="mb-4 border-cyber-blue/30 bg-cyber-blue/5">
          <AlertCircle className="h-4 w-4" />
          <AlertTitle>Important Note</AlertTitle>
          <AlertDescription>
            This tool provides recommendations for potential vulnerabilities based on common web technologies.
            Always conduct security testing with proper authorization. Unauthorized testing may be illegal.
          </AlertDescription>
        </Alert>

        <div className="space-y-6">
          <div className="flex space-x-2">
            <div className="flex-1">
              <Label htmlFor="targetUrl" className="text-sm mb-2 block text-gray-300">
                Target URL
              </Label>
              <Input
                id="targetUrl"
                value={targetUrl}
                onChange={(e) => setTargetUrl(e.target.value)}
                placeholder="example.com"
                className="font-mono"
              />
            </div>
            <div className="pt-8">
              <Button
                onClick={analyzeWebsite}
                disabled={isScanning}
                className="bg-cyber-blue hover:bg-cyber-blue/80 h-10"
              >
                {isScanning ? (
                  <>
                    <div className="animate-spin h-4 w-4 border-2 border-white border-opacity-50 border-t-white rounded-full mr-2" />
                    Scanning...
                  </>
                ) : (
                  <>
                    <Search className="h-4 w-4 mr-2" />
                    Analyze Website
                  </>
                )}
              </Button>
            </div>
          </div>
          
          {error && (
            <Alert variant="destructive" className="mt-4">
              <AlertCircle className="h-4 w-4" />
              <AlertTitle>Error</AlertTitle>
              <AlertDescription>{error}</AlertDescription>
            </Alert>
          )}
          
          {isScanning && (
            <div className="space-y-4 mt-4">
              <div className="flex items-center gap-2">
                <Skeleton className="h-4 w-4 rounded-full" />
                <Skeleton className="h-4 w-32" />
              </div>
              <Skeleton className="h-24 w-full" />
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <Skeleton className="h-40 w-full" />
                <Skeleton className="h-40 w-full" />
              </div>
            </div>
          )}
          
          {scanResults && (
            <div className="space-y-6 mt-4">
              <div className="flex flex-wrap items-center gap-2">
                <h3 className="text-lg font-medium">Technologies Detected:</h3>
                {scanResults.technologies?.map((tech, i) => (
                  <Badge key={i} variant="outline" className="capitalize">
                    {tech}
                  </Badge>
                ))}
              </div>
              
              {scanResults.vulnerabilities.length > 0 ? (
                <Tabs defaultValue="by-severity" className="w-full">
                  <TabsList className="grid w-full grid-cols-2">
                    <TabsTrigger value="by-severity">By Severity</TabsTrigger>
                    <TabsTrigger value="by-category">By Category</TabsTrigger>
                  </TabsList>
                  
                  <TabsContent value="by-severity" className="mt-4">
                    {['critical', 'high', 'medium', 'low'].map(severity => {
                      const vulnsWithSeverity = scanResults.vulnerabilities.filter(v => v.severity === severity);
                      if (vulnsWithSeverity.length === 0) return null;
                      
                      return (
                        <div key={severity} className="mb-6">
                          <div className={`inline-flex items-center px-3 py-1 rounded-md ${getSeverityColor(severity)} mb-3 uppercase text-xs font-bold`}>
                            <ShieldAlert className="h-3 w-3 mr-1" />
                            {severity} Severity
                          </div>
                          
                          <div className="space-y-4">
                            {vulnsWithSeverity.map((vuln, i) => (
                              <Card key={i} className="bg-cyber-darker border border-cyber-dark">
                                <CardHeader className="pb-2">
                                  <div className="flex justify-between items-start">
                                    <CardTitle className="text-lg">{vuln.name}</CardTitle>
                                    <Button 
                                      variant="ghost" 
                                      size="sm" 
                                      className="h-6 px-2 text-xs"
                                      onClick={() => handleCopy(`${vuln.name}\n\nDescription: ${vuln.description}\n\nRecommendation: ${vuln.recommendation}`)}
                                    >
                                      <Copy className="h-3 w-3 mr-1" /> Copy
                                    </Button>
                                  </div>
                                  <CardDescription>{vuln.description}</CardDescription>
                                </CardHeader>
                                <CardContent>
                                  <div className="text-sm">
                                    <p className="font-medium text-gray-300 mb-1">Recommendation:</p>
                                    <p className="text-gray-400 mb-3">{vuln.recommendation}</p>
                                    
                                    {vuln.references.length > 0 && (
                                      <div className="text-xs">
                                        <p className="font-medium text-gray-300 mb-1">References:</p>
                                        <ul className="list-disc pl-5 space-y-1">
                                          {vuln.references.map((ref, i) => (
                                            <li key={i}>
                                              <a 
                                                href={ref} 
                                                target="_blank" 
                                                rel="noopener noreferrer"
                                                className="text-cyber-blue hover:underline flex items-center"
                                              >
                                                {new URL(ref).hostname} <ExternalLink className="h-3 w-3 ml-1" />
                                              </a>
                                            </li>
                                          ))}
                                        </ul>
                                      </div>
                                    )}
                                  </div>
                                </CardContent>
                              </Card>
                            ))}
                          </div>
                        </div>
                      );
                    })}
                  </TabsContent>
                  
                  <TabsContent value="by-category" className="mt-4">
                    {Object.entries(groupVulnerabilitiesByCategory(scanResults.vulnerabilities)).map(([category, vulns]) => (
                      <div key={category} className="mb-6">
                        <h3 className="text-lg font-semibold mb-3">{category}</h3>
                        <div className="space-y-4">
                          {vulns.map((vuln, i) => (
                            <Card key={i} className="bg-cyber-darker border border-cyber-dark">
                              <CardHeader className="pb-2">
                                <div className="flex justify-between items-start">
                                  <div>
                                    <CardTitle className="text-lg">{vuln.name}</CardTitle>
                                    <Badge className={`mt-1 ${getSeverityColor(vuln.severity)}`}>
                                      {vuln.severity}
                                    </Badge>
                                  </div>
                                  <Button 
                                    variant="ghost" 
                                    size="sm" 
                                    className="h-6 px-2 text-xs"
                                    onClick={() => handleCopy(`${vuln.name}\n\nDescription: ${vuln.description}\n\nRecommendation: ${vuln.recommendation}`)}
                                  >
                                    <Copy className="h-3 w-3 mr-1" /> Copy
                                  </Button>
                                </div>
                                <CardDescription className="mt-2">{vuln.description}</CardDescription>
                              </CardHeader>
                              <CardContent>
                                <div className="text-sm">
                                  <p className="font-medium text-gray-300 mb-1">Recommendation:</p>
                                  <p className="text-gray-400 mb-3">{vuln.recommendation}</p>
                                  
                                  {vuln.references.length > 0 && (
                                    <div className="text-xs">
                                      <p className="font-medium text-gray-300 mb-1">References:</p>
                                      <ul className="list-disc pl-5 space-y-1">
                                        {vuln.references.map((ref, i) => (
                                          <li key={i}>
                                            <a 
                                              href={ref} 
                                              target="_blank" 
                                              rel="noopener noreferrer"
                                              className="text-cyber-blue hover:underline flex items-center"
                                            >
                                              {new URL(ref).hostname} <ExternalLink className="h-3 w-3 ml-1" />
                                            </a>
                                          </li>
                                        ))}
                                      </ul>
                                    </div>
                                  )}
                                </div>
                              </CardContent>
                            </Card>
                          ))}
                        </div>
                      </div>
                    ))}
                  </TabsContent>
                </Tabs>
              ) : (
                <Alert className="mt-4 bg-green-900/30 border border-green-500/50">
                  <AlertCircle className="h-4 w-4 text-green-400" />
                  <AlertTitle className="text-green-400">No Vulnerabilities Detected</AlertTitle>
                  <AlertDescription>
                    No obvious vulnerabilities were detected for this website. However, this doesn't guarantee 
                    the site is secure. Consider a more in-depth security assessment.
                  </AlertDescription>
                </Alert>
              )}
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default WebExploitTool;
