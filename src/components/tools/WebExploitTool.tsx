
import React, { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { useToast } from '@/components/ui/use-toast';
import { Bug, ArrowRight, RotateCcw, Copy, AlertTriangle, Play } from 'lucide-react';

const WebExploitTool: React.FC = () => {
  const [url, setUrl] = useState('');
  const [payload, setPayload] = useState('');
  const [method, setMethod] = useState('GET');
  const [headers, setHeaders] = useState('');
  const [params, setParams] = useState('');
  const [result, setResult] = useState<string | null>(null);
  const [isScanning, setIsScanning] = useState(false);
  const [scanProgress, setScanProgress] = useState(0);
  const [vulnerabilities, setVulnerabilities] = useState<string[]>([]);
  const [activeTool, setActiveTool] = useState('sql');
  const { toast } = useToast();

  const commonPayloads = {
    sql: [
      "' OR '1'='1",
      "1; DROP TABLE users",
      "admin'--",
      "1' UNION SELECT username, password FROM users--",
      "1' OR '1'='1' --"
    ],
    xss: [
      "<script>alert('XSS')</script>",
      "<img src=x onerror=alert('XSS')>",
      "\"><script>alert(document.cookie)</script>",
      "<svg onload=alert(1)>",
      "javascript:alert(1)"
    ],
    lfi: [
      "../../../etc/passwd",
      "../../../../etc/shadow",
      "../../Windows/system.ini",
      "php://filter/convert.base64-encode/resource=index.php",
      "..%2f..%2f..%2f..%2fetc%2fpasswd"
    ]
  };

  const handleUsePayload = (payload: string) => {
    setPayload(payload);
  };

  const handleCopy = () => {
    if (!result) return;
    
    navigator.clipboard.writeText(result);
    toast({
      title: "Copied to clipboard",
      description: "Result copied to clipboard",
    });
  };

  const handleReset = () => {
    setUrl('');
    setPayload('');
    setMethod('GET');
    setHeaders('');
    setParams('');
    setResult(null);
    setVulnerabilities([]);
    setScanProgress(0);
  };

  const simulateVulnerabilityScan = () => {
    if (!url) {
      toast({
        title: "URL required",
        description: "Please enter a URL to scan",
        variant: "destructive"
      });
      return;
    }
    
    setIsScanning(true);
    setScanProgress(0);
    setVulnerabilities([]);
    
    // Simulate scanning process
    const interval = setInterval(() => {
      setScanProgress(prev => {
        const newProgress = prev + Math.floor(Math.random() * 10) + 1;
        return newProgress > 100 ? 100 : newProgress;
      });
    }, 200);
    
    setTimeout(() => {
      clearInterval(interval);
      setScanProgress(100);
      
      // Generate fake vulnerabilities based on URL
      const foundVulns = [];
      
      if (url.includes('example.com') || url.includes('test') || !url.startsWith('https')) {
        foundVulns.push("SQL Injection vulnerability in login form");
        foundVulns.push("Outdated jQuery library (v1.8.3)");
      }
      
      if (!url.startsWith('https')) {
        foundVulns.push("Connection not using HTTPS");
      }
      
      if (url.includes('php') || url.includes('asp')) {
        foundVulns.push("Possible Local File Inclusion in page parameter");
        foundVulns.push("Cross-Site Scripting (XSS) in search function");
      }
      
      if (url.includes('wp-') || url.includes('wordpress')) {
        foundVulns.push("WordPress version exposure (v5.8.1)");
        foundVulns.push("Multiple plugin vulnerabilities detected");
      }
      
      // Add some random vulnerabilities if none were found
      if (foundVulns.length === 0) {
        foundVulns.push("Possible information disclosure in HTTP headers");
        foundVulns.push("Cross-Site Request Forgery (CSRF) in form submission");
      }
      
      setVulnerabilities(foundVulns);
      setIsScanning(false);
      
      toast({
        title: "Scan complete",
        description: `Found ${foundVulns.length} potential vulnerabilities`,
      });
    }, 3500);
  };

  const simulateExploit = () => {
    if (!url) {
      toast({
        title: "URL required",
        description: "Please enter a target URL",
        variant: "destructive"
      });
      return;
    }
    
    if (!payload) {
      toast({
        title: "Payload required",
        description: "Please enter or select a payload",
        variant: "destructive"
      });
      return;
    }
    
    setIsScanning(true);
    setResult(null);
    
    // Simulate request and response time
    setTimeout(() => {
      let mockResponse = '';
      
      switch (activeTool) {
        case 'sql':
          if (payload.includes("'") || payload.includes("--") || payload.includes("UNION")) {
            mockResponse = `
HTTP/1.1 200 OK
Server: Apache/2.4.41
Content-Type: text/html; charset=UTF-8

<html>
<body>
  <h1>User Dashboard</h1>
  <table>
    <tr><th>Username</th><th>Email</th><th>Role</th></tr>
    <tr><td>admin</td><td>admin@example.com</td><td>Administrator</td></tr>
    <tr><td>john_doe</td><td>john@example.com</td><td>User</td></tr>
    <tr><td>jane_smith</td><td>jane@example.com</td><td>User</td></tr>
    <tr><td>system_user</td><td>system@internal.local</td><td>System</td></tr>
  </table>
  
  <!-- DEBUG: SQL Query: SELECT * FROM users WHERE id = ${payload} -->
  <!-- TODO: Remove debug info in production -->
</body>
</html>`;
          } else {
            mockResponse = `
HTTP/1.1 200 OK
Server: Apache/2.4.41
Content-Type: text/html; charset=UTF-8

<html>
<body>
  <h1>User Details</h1>
  <p>No user found with that ID.</p>
  
  <!-- DEBUG: SQL Query executed successfully -->
</body>
</html>`;
          }
          break;
          
        case 'xss':
          mockResponse = `
HTTP/1.1 200 OK
Server: Apache/2.4.41
Content-Type: text/html; charset=UTF-8

<html>
<body>
  <h1>Search Results</h1>
  <p>You searched for: ${payload}</p>
  <div id="results">No results found</div>
  
  <!-- Response would show how the page handled the XSS payload -->
  <!-- In a vulnerable app, the script would execute -->
</body>
</html>`;
          break;
          
        case 'lfi':
          if (payload.includes("/etc/passwd") || payload.includes("system.ini") || payload.includes("filter")) {
            mockResponse = `
HTTP/1.1 200 OK
Server: Apache/2.4.41
Content-Type: text/plain; charset=UTF-8

root:x:0:0:root:/root:/bin/bash
daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin
bin:x:2:2:bin:/bin:/usr/sbin/nologin
sys:x:3:3:sys:/dev:/usr/sbin/nologin
sync:x:4:65534:sync:/bin:/bin/sync
games:x:5:60:games:/usr/games:/usr/sbin/nologin
man:x:6:12:man:/var/cache/man:/usr/sbin/nologin
lp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin
mail:x:8:8:mail:/var/mail:/usr/sbin/nologin
news:x:9:9:news:/var/spool/news:/usr/sbin/nologin
uucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologin
proxy:x:13:13:proxy:/bin:/usr/sbin/nologin
www-data:x:33:33:www-data:/var/www:/usr/sbin/nologin
backup:x:34:34:backup:/var/backups:/usr/sbin/nologin
list:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologin
irc:x:39:39:ircd:/var/run/ircd:/usr/sbin/nologin
gnats:x:41:41:Gnats Bug-Reporting System:/var/lib/gnats:/usr/sbin/nologin
nobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin
_apt:x:100:65534::/nonexistent:/usr/sbin/nologin
mysql:x:101:101:MySQL Server,,,:/nonexistent:/bin/false
`;
          } else {
            mockResponse = `
HTTP/1.1 404 Not Found
Server: Apache/2.4.41
Content-Type: text/html; charset=UTF-8

<html>
<body>
  <h1>404 Not Found</h1>
  <p>The requested file ${payload} was not found on this server.</p>
</body>
</html>`;
          }
          break;
      }
      
      setResult(mockResponse);
      setIsScanning(false);
      
      toast({
        title: "Request sent",
        description: "Response received from target",
      });
    }, 1500);
  };

  return (
    <div className="animate-fade-up w-full max-w-3xl mx-auto">
      <div className="cyber-panel p-6">
        <div className="flex items-center mb-6">
          <Bug className="mr-2 h-6 w-6 text-cyber-blue" />
          <h2 className="text-xl font-bold flex-1">Web Exploitation Tools</h2>
          <Button
            variant="outline"
            size="sm"
            className="text-xs"
            onClick={handleReset}
          >
            <RotateCcw className="mr-1 h-3 w-3" />
            Reset
          </Button>
        </div>

        <div className="mb-6 p-3 bg-yellow-900/20 border border-yellow-600/30 rounded-md flex items-center">
          <AlertTriangle className="h-5 w-5 text-yellow-500 mr-2 flex-shrink-0" />
          <p className="text-sm text-yellow-200/80">
            For educational purposes only. Only use these tools on systems you own or have explicit permission to test.
          </p>
        </div>

        <div className="w-full mb-6">
          <Label htmlFor="target-url" className="text-sm mb-2 block text-gray-300">
            Target URL
          </Label>
          <Input
            id="target-url"
            value={url}
            onChange={(e) => setUrl(e.target.value)}
            placeholder="https://example.com/page.php?id=1"
            className="font-mono"
          />
        </div>

        <Tabs defaultValue="scanner" className="w-full">
          <TabsList className="w-full grid grid-cols-2 mb-6">
            <TabsTrigger value="scanner">Vulnerability Scanner</TabsTrigger>
            <TabsTrigger value="exploits">Exploitation Tools</TabsTrigger>
          </TabsList>
          
          <TabsContent value="scanner" className="space-y-6">
            <div className="p-4 bg-cyber-darker rounded-md">
              <h3 className="text-sm font-medium mb-2">Scanner will check for:</h3>
              <ul className="text-xs text-gray-300 space-y-1 list-disc pl-4">
                <li>SQL Injection vulnerabilities</li>
                <li>Cross-Site Scripting (XSS) vectors</li>
                <li>Local/Remote File Inclusion</li>
                <li>Cross-Site Request Forgery (CSRF)</li>
                <li>Insecure server configurations</li>
                <li>Outdated software components</li>
              </ul>
            </div>
            
            <Button
              onClick={simulateVulnerabilityScan}
              disabled={isScanning || !url}
              className="w-full bg-cyber-blue hover:bg-cyber-blue/80"
            >
              {isScanning ? (
                <>
                  <div className="animate-spin h-4 w-4 border-2 border-white border-opacity-50 border-t-white rounded-full mr-2" />
                  Scanning... {scanProgress}%
                </>
              ) : (
                <>
                  <Play className="h-4 w-4 mr-2" />
                  Start Vulnerability Scan
                </>
              )}
            </Button>
            
            {vulnerabilities.length > 0 && (
              <div className="w-full">
                <Label className="text-sm mb-2 block text-gray-300">
                  Vulnerabilities Found
                </Label>
                <div className="bg-cyber-darker border border-red-500/30 rounded-md overflow-hidden">
                  <div className="p-3 bg-red-900/20 border-b border-red-500/30 text-sm font-medium">
                    {vulnerabilities.length} potential vulnerabilities detected
                  </div>
                  <ul className="p-3 space-y-2">
                    {vulnerabilities.map((vuln, index) => (
                      <li key={index} className="flex items-start">
                        <span className="text-red-400 mr-2">•</span>
                        <span className="text-sm">{vuln}</span>
                      </li>
                    ))}
                  </ul>
                </div>
              </div>
            )}
          </TabsContent>
          
          <TabsContent value="exploits" className="space-y-6">
            <div className="grid grid-cols-1 md:grid-cols-3 gap-2">
              <Button
                variant={activeTool === 'sql' ? 'default' : 'outline'}
                onClick={() => setActiveTool('sql')}
                className={activeTool === 'sql' ? 'bg-cyber-blue hover:bg-cyber-blue/80' : ''}
              >
                SQL Injection
              </Button>
              <Button
                variant={activeTool === 'xss' ? 'default' : 'outline'}
                onClick={() => setActiveTool('xss')}
                className={activeTool === 'xss' ? 'bg-cyber-blue hover:bg-cyber-blue/80' : ''}
              >
                XSS
              </Button>
              <Button
                variant={activeTool === 'lfi' ? 'default' : 'outline'}
                onClick={() => setActiveTool('lfi')}
                className={activeTool === 'lfi' ? 'bg-cyber-blue hover:bg-cyber-blue/80' : ''}
              >
                LFI/RFI
              </Button>
            </div>
            
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <Label htmlFor="method" className="text-sm mb-2 block text-gray-300">
                  HTTP Method
                </Label>
                <Select 
                  value={method} 
                  onValueChange={setMethod}
                >
                  <SelectTrigger>
                    <SelectValue placeholder="Select method" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="GET">GET</SelectItem>
                    <SelectItem value="POST">POST</SelectItem>
                    <SelectItem value="PUT">PUT</SelectItem>
                  </SelectContent>
                </Select>
              </div>
              
              <div>
                <Label htmlFor="params" className="text-sm mb-2 block text-gray-300">
                  Parameters (optional)
                </Label>
                <Input
                  id="params"
                  value={params}
                  onChange={(e) => setParams(e.target.value)}
                  placeholder="param1=value1&param2=value2"
                  className="font-mono"
                />
              </div>
            </div>
            
            <div>
              <div className="flex justify-between items-center">
                <Label htmlFor="payload" className="text-sm mb-2 block text-gray-300">
                  Payload
                </Label>
                <Select
                  value=""
                  onValueChange={(value) => handleUsePayload(value)}
                >
                  <SelectTrigger className="w-[180px]">
                    <SelectValue placeholder="Common payloads" />
                  </SelectTrigger>
                  <SelectContent>
                    {commonPayloads[activeTool as keyof typeof commonPayloads].map((p, i) => (
                      <SelectItem key={i} value={p}>
                        {p.length > 20 ? p.substring(0, 20) + '...' : p}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>
              <Textarea
                id="payload"
                value={payload}
                onChange={(e) => setPayload(e.target.value)}
                placeholder={`Enter ${activeTool.toUpperCase()} payload...`}
                className="font-mono resize-y min-h-[80px]"
              />
            </div>
            
            <div>
              <Label htmlFor="headers" className="text-sm mb-2 block text-gray-300">
                Custom Headers (optional)
              </Label>
              <Textarea
                id="headers"
                value={headers}
                onChange={(e) => setHeaders(e.target.value)}
                placeholder="User-Agent: Mozilla/5.0
Cookie: session=1234
X-Forwarded-For: 127.0.0.1"
                className="font-mono resize-y min-h-[80px]"
              />
            </div>
            
            <Button
              onClick={simulateExploit}
              disabled={isScanning || !url || !payload}
              className="w-full bg-cyber-blue hover:bg-cyber-blue/80"
            >
              {isScanning ? (
                <>
                  <div className="animate-spin h-4 w-4 border-2 border-white border-opacity-50 border-t-white rounded-full mr-2" />
                  Sending request...
                </>
              ) : (
                <>
                  <ArrowRight className="h-4 w-4 mr-2" />
                  Send Exploit
                </>
              )}
            </Button>
            
            {result && (
              <div className="w-full">
                <div className="flex justify-between items-center mb-2">
                  <Label className="text-sm text-gray-300">
                    Response
                  </Label>
                  <Button
                    onClick={handleCopy}
                    variant="outline"
                    size="sm"
                    className="h-6 px-2 text-xs"
                  >
                    <Copy className="mr-1 h-3 w-3" />
                    Copy
                  </Button>
                </div>
                <div className="font-mono text-sm bg-cyber-darker border border-cyber-dark p-4 rounded-md whitespace-pre-wrap overflow-x-auto">
                  {result}
                </div>
              </div>
            )}
          </TabsContent>
        </Tabs>
      </div>
    </div>
  );
};

export default WebExploitTool;
